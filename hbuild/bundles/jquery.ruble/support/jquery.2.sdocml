<?xml version="1.0" encoding="UTF-8" ?>
<javascript>
	<aliases>
		<alias name="$" type="jQuery"/>
		<alias type="Class&lt;jQuery&gt;" name="jQuery"/>
	</aliases>
	<class type="Offset" >
		<properties>
			<property type="Number" name="top" ></property>
			<property type="Number" name="left" ></property>
		</properties>
	</class>
	<class type="keyvalue" >
		<properties>
			<property type="String" name="name" ></property>
			<property type="String" name="value" ></property>
		</properties>
	</class>
	<class type="jQuerySetting" >
		<properties>
			<property type="String" name="accepts" ></property>
			<property type="Boolean" name="async" ></property>
			<property type="Function(jQuery.jqXHR,jQuerySetting)" name="beforeSend" ></property>
			<property type="Boolean" name="cache" ></property>
			<property type="Function(jQuery.jqXHR,String)" name="complete" ></property>
			<property type="Object" name="contents" ></property>
			<property type="String" name="contentType" ></property>
			<property type="Object|Element" name="context" ></property>
			<property type="Obejct" name="converters" ></property>
			<property type="Obejct|String" name="data" ></property>
			<property type="Function(String,String)" name="dataFilter" ></property>
			<property type="Function(jQuery.jqXHR,String,String)" name="error" ></property>
			<property type="Boolean" name="global" ></property>
			<property type="Obejct" name="headers" ></property>
			<property type="Boolean" name="ifModified" ></property>
			<property type="Boolean" name="isLocal" ></property>
			<property type="String" name="jsonp" ></property>
			<property type="String|Function" name="jsonpCallback" ></property>
			<property type="String" name="mimeType" ></property>
			<property type="String" name="password" ></property>
			<property type="Boolean" name="processData" ></property>
			<property type="String" name="scriptCharset" ></property>
			<property type="Object" name="xhrFields" ></property>
			<property type="Object" name="statusCode" ></property>
			<property type="Function(Object,String,jQuery.jqXHR)" name="success" ></property>
			<property type="Number" name="timeout" ></property>
			<property type="Boolean" name="traditional" ></property>
			<property type="String" name="type" ></property>
			<property type="String|URIString" name="url" ></property>
			<property type="String" name="username" ></property>
			<property type="Function" name="xhr" ></property>
		</properties>
	</class>
	<class type="jQuery" superclass="Object">
		<constructors>
      <constructor>
        <parameters>
          <parameter name="selector" type="Selector|SelectorString" usage="required">
            <description>A string containing a selector expression</description>
          </parameter>
          <parameter name="context" type="Element|jQuery" usage="optional">
            <description>A DOM Element, Document, or jQuery to use as context</description>
          </parameter>
          <parameter name="element" type="Element" usage="required">
            <description>A DOM element to wrap in a jQuery object.</description>
          </parameter>
          <parameter name="elementArray" type="Array" usage="required">
            <description>An array containing a set of DOM elements to wrap in a jQuery object.</description>
          </parameter>
          <parameter name="jQuery object" type="Object" usage="required">
            <description>An existing jQuery object to clone.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
			<return-type type="jQuery.fn"/>
        </return-types>
        <description>Accepts a string containing a CSS selector which is then used to match a set of elements.</description>
        <examples>
          <example>
			&lt;p&gt;Find all p elements that are children of a div element and apply a border to them.&lt;/p&gt;
		
		&lt;p&gt;
  $("div &gt; p").css("border", "1px solid gray");
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Find all inputs of type radio within the first form in the document.&lt;/p&gt;
		
		&lt;p&gt;$("input:radio", document.forms[0]);&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Find all div elements within an XML document from an Ajax response.&lt;/p&gt;
		
		&lt;p&gt;$("div", xml.responseXML);&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Set the background color of the page to black.&lt;/p&gt;
		
		&lt;p&gt;$(document.body).css( "background", "black" );&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Hide all the input elements within a form.&lt;/p&gt;
		
		&lt;p&gt;$(myForm.elements).hide()&lt;/p&gt;
	</example>
        </examples>
      </constructor>
      <constructor>
        <parameters>
          <parameter name="html" type="String|HTMLString" usage="required">
            <description>A string of HTML to create on the fly. Note that this parses HTML, </description>
          </parameter>
          <parameter name="ownerDocument" type="Document" usage="optional">
            <description>A document in which the new elements will be created</description>
          </parameter>
          <parameter name="html" type="String|HTMLString" usage="required">
            <description>A string defining a single, standalone, HTML element (e.g. &lt;div/&gt; or &lt;div&gt;&lt;/div&gt;).</description>
          </parameter>
          <parameter name="props" type="Object" usage="required">
            <description>An map of attributes, events, and methods to call on the newly-created element.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
			<return-type type="jQuery.fn"/>
        </return-types>
        <description>Creates DOM elements on the fly from the provided string of raw HTML.</description>
        <examples>
          <example>
			&lt;p&gt;Create a div element (and all of its contents) dynamically and append it to the body element. Internally, an element is created and its innerHTML property set to the given markup.&lt;/p&gt;
		
		&lt;p&gt;$("&lt;div&gt;&lt;p&gt;Hello&lt;/p&gt;&lt;/div&gt;").appendTo("body")&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Create some DOM elements.&lt;/p&gt;
		
		&lt;p&gt;$("&lt;div/&gt;", {
  "class": "test",
  text: "Click me!",
  click: function(){
    $(this).toggleClass("test");
  }
}).appendTo("body");&lt;/p&gt;
	</example>
        </examples>
      </constructor>
      <constructor>
        <parameters>
          <parameter name="callback" type="Function" usage="required">
            <description>The function to execute when the DOM is ready.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
			<return-type type="jQuery.fn"/>
        </return-types>
        <description>Binds a function to be executed when the DOM has finished loading.</description>
        <examples>
          <example>
			&lt;p&gt;Execute the function when the DOM is ready to be used.&lt;/p&gt;
		
		&lt;p&gt;$(function(){
   // Document is ready
 });
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Use both the shortcut for $(document).ready() and the argument to write failsafe jQuery code using the $ alias, without relying on the global alias.&lt;/p&gt;
		
		&lt;p&gt;jQuery(function($) {
    // Your code using failsafe $ alias here...
  });&lt;/p&gt;
	</example>
        </examples>
      </constructor>
    </constructors>
		<methods>
			<method name="ajax" scope="static">
				<parameters>
          <parameter name="url" type="String|URIString|jQuerySetting" usage="required">
            <description>A string containing the URL to which the request is sent.</description>
          </parameter>
          <parameter name="settings" type="Object" usage="optional">
            <description>A set of key/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with </description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.jqXHR"/>
        </return-types>
        <description>Perform an asynchronous HTTP (Ajax) request.</description>
        <examples>
          <example>
			&lt;p&gt;Load and execute a JavaScript file.&lt;/p&gt;
		
		&lt;p&gt;$.ajax({
   type: "GET",
   url: "test.js",
   dataType: "script"
 });&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Save some data to the server and notify the user once it's complete.&lt;/p&gt;
		
		&lt;p&gt;$.ajax({
   type: "POST",
   url: "some.php",
   data: "name=John&amp;location=Boston",
   success: function(msg){
     alert( "Data Saved: " + msg );
   }
 });&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Retrieve the latest version of an HTML page.&lt;/p&gt;
		
		&lt;p&gt;$.ajax({
  url: "test.html",
  cache: false,
  success: function(html){
    $("#results").append(html);
  }
});&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Loads data synchronously. Blocks the browser while the requests is active.
It is better to block user interaction by other means when synchronization is
necessary.&lt;/p&gt;
		
		&lt;p&gt;var html = $.ajax({
  url: "some.php",
  async: false
 }).responseText;&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Sends an xml document as data to the server. By setting the processData
option to false, the automatic conversion of data to strings is prevented.&lt;/p&gt;
		
		&lt;p&gt;var xmlDocument = [create xml document];
 $.ajax({
   url: "page.php",
   processData: false,
   data: xmlDocument,
   success: handleResponse
 });&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Sends an id as data to the server, save some data to the server and notify the user once it's complete.  Note that this usage - returning the result of the call into a variable - requires a synchronous (blocking) request! (async:false)&lt;/p&gt;
		
		&lt;p&gt;var bodyContent = $.ajax({
      url: "script.php",
      global: false,
      type: "POST",
      data: {id : this.getAttribute('id')},
      dataType: "html",
      async:false,
      success: function(msg){
         alert(msg);
      }
   }
).responseText;&lt;/p&gt;
	</example>
        </examples>
      
			</method>
			<method name="ajaxPrefilter" scope="static">
				<parameters>
          <parameter name="dataTypes" type="String" usage="optional">
            <description>An optional string containing one or more space-separated dataTypes</description>
          </parameter>
          <parameter name="handler" type="Function(Object,Object,XMLHttpRequest)" usage="required">
            <description>A handler to set default values for future Ajax requests.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="None"/>
        </return-types>
        <description>Handle custom Ajax options or modify existing options before each request is sent and before they are processed by </description>
			</method>
			<method name="ajaxSetup" scope="static">
				<parameters>
          <parameter name="options" type="Object" usage="required">
            <description>A set of key/value pairs that configure the default Ajax request. All options are optional. </description>
          </parameter>
        </parameters>
        <description>Set default values for future Ajax requests.</description>
        <examples>
          <example>
			&lt;p&gt;Sets the defaults for Ajax requests to the url "/xmlhttp/", disables global handlers and uses POST instead of GET. The following Ajax requests then sends some data without having to set anything else.&lt;/p&gt;
		
		&lt;p&gt;$.ajaxSetup({
   url: "/xmlhttp/",
   global: false,
   type: "POST"

 });
 $.ajax({ data: myData });&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="ajaxTransport" scope="static">
				<return-types>
					<return-type type="None"/>
				</return-types>
				<parameters>
					<parameter name="dataType" type="String" usage=""/>
					<parameter name="handler" type="Function(Object,Object,XMLHttpRequest)" usage=""/>
				</parameters>
			</method>
			<method name="Callbacks" scope="static">
				<return-types>
					<return-type type="jQuery.Callbacks"/>
				</return-types>
				<parameters>
					<parameter name="flags" type="String" usage=""/>
				</parameters>
			</method>
			<method name="contains" scope="static">
				<parameters>
          <parameter name="container" type="Element" usage="required">
            <description>The DOM element that may contain the other element.</description>
          </parameter>
          <parameter name="contained" type="Element" usage="required">
            <description>The DOM element that may be contained by the other element.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Check to see if a DOM element is within another DOM element.</description>
        <examples>
          <example>
			&lt;p&gt;Check if an element is inside another. Text and comment nodes are not supported.&lt;/p&gt;
		
		&lt;p&gt;jQuery.contains(document.documentElement, document.body); // true
jQuery.contains(document.body, document.documentElement); // false&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="data" scope="static">
				<parameters>
          <parameter name="element" type="Element" usage="required">
            <description>The DOM element to associate with the data.</description>
          </parameter>
          <parameter name="key" type="String" usage="required">
            <description>A string naming the piece of data to set.</description>
          </parameter>
          <parameter name="value" type="Object" usage="required">
            <description>The new data value.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Store arbitrary data associated with the specified element. Returns the value that was set.</description>
        <examples>
          <example>
			&lt;p&gt;Store then retrieve a value from the div element.&lt;/p&gt;
		
		&lt;p&gt;var div = $("div")[0];
    jQuery.data(div, "test", { first: 16, last: "pizza!" });
    $("span:first").text(jQuery.data(div, "test").first);
    $("span:last").text(jQuery.data(div, "test").last);&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="Event" scope="static">
				<return-types>
					<return-type type="jQuery.Event"/>
				</return-types>
				<parameters>
					<parameter name="type" type="Object" usage=""/>
					<parameter name="props" type="Object" usage="optional"/>
				</parameters>
			</method>
			<method name="Deferred" scope="static">
				<parameters>
          <parameter name="function" type="Function(jQuery.Deferred)" usage="optional">
            <description>An optional function which is called just before the constructor returns and is passed the constructed deferred object as both the this object and as the first argument to the function.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.Deferred"/>
        </return-types>
        <description>A chainable utility object that can register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function.</description>
			</method>
			<method name="dequeue" scope="static">
				<parameters>
          <parameter name="element" type="Element" usage="required">
            <description>A DOM element from which to remove and execute a queued function.</description>
          </parameter>
          <parameter name="queueName" type="String" usage="optional">
            <description>A string containing the name of the queue. Defaults to </description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Execute the next function on the queue for the matched element.</description>
        <examples>
          <example>
			&lt;p&gt;Use dequeue to end a custom queue function which allows the queue to keep going.&lt;/p&gt;
		
		&lt;p&gt;$("button").click(function () {
      $("div").animate({left:'+=200px'}, 2000);
      $("div").animate({top:'0px'}, 600);
      $("div").queue(function () {
        $(this).toggleClass("red");
         $.dequeue( this );
              });
      $("div").animate({left:'10px', top:'30px'}, 700);
    });&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="each" scope="static">
				<parameters>
          <parameter name="collection" type="Object" usage="required">
            <description>The object or array to iterate over.</description>
          </parameter>
          <parameter name="callback" type="Function" usage="required">
            <description>The function that will be executed on every object.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function's arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties.</description>
        <examples>
          <example>
			&lt;p&gt;Iterates through the array displaying each number as both a word and numeral&lt;/p&gt;
		
		&lt;p&gt;
    var arr = [ "one", "two", "three", "four", "five" ];
    var obj = { one:1, two:2, three:3, four:4, five:5 };

    jQuery.each(arr, function() {
      $("#" + this).text("Mine is " + this + ".");
       return (this != "three"); // will stop running after "three"
   });

    jQuery.each(obj, function(i, val) {
      $("#" + i).append(document.createTextNode(" - " + val));
    });
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Iterates over items in an array, accessing both the current item and its index.&lt;/p&gt;
		
		&lt;p&gt;$.each( ['a','b','c'], function(i, l){
   alert( "Index #" + i + ": " + l );
 });&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Iterates over the properties in an object, accessing both the current item and its key.&lt;/p&gt;
		
		&lt;p&gt;$.each( { name: "John", lang: "JS" }, function(k, v){
   alert( "Key: " + k + ", Value: " + v );
 });&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="extend" scope="static">
				<parameters>
				<parameter name="target" type="Object" usage="required">
            <description> An object that will receive the new properties if additional objects are passed in or that will extend the jQuery namespace if it is the sole argument.</description>
          </parameter>
          <parameter name="object1" type="Object" usage="optional">
            <description>An object containing additional properties to merge in.</description>
          </parameter>
          <parameter name="objectN" type="Object" usage="optional">
            <description>Additional objects containing properties to merge in.</description>
          </parameter>
          <parameter name="deep" type="Boolean" usage="optional">
            <description>If true, the merge becomes recursive (aka. deep copy).</description>
          </parameter>
          <parameter name="target" type="Object" usage="required">
            <description>The object to extend. It will receive the new properties.</description>
          </parameter>
          <parameter name="object1" type="Object" usage="required">
            <description>An object containing additional properties to merge in.</description>
          </parameter>
          <parameter name="objectN" type="Object" usage="optional">
            <description>Additional objects containing properties to merge in.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Merge the contents of two or more objects together into the first object.</description>
        <examples>
          <example>
			&lt;p&gt;Merge two objects, modifying the first.&lt;/p&gt;
		
		&lt;p&gt;
var object1 = {
  apple: 0,
  banana: {weight: 52, price: 100},
  cherry: 97
};
var object2 = {
  banana: {price: 200},
  durian: 100
};

/* merge object2 into object1 */
$.extend(object1, object2);

var printObj = function(obj) {
  var arr = [];
  $.each(obj, function(key, val) {
    var next = key + ": ";
    next += $.isPlainObject(val) ? printObj(val) : val;
    arr.push( next );
  });
  return "{ " +  arr.join(", ") + " }";
};

$("#log").append( printObj(object1) );
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Merge two objects recursively, modifying the first.&lt;/p&gt;
		
		&lt;p&gt;
var object1 = {
  apple: 0,
  banana: {weight: 52, price: 100},
  cherry: 97
};
var object2 = {
  banana: {price: 200},
  durian: 100
};

/* merge object2 into object1, recursively */
$.extend(true, object1, object2);

var printObj = function(obj) {
  var arr = [];
  $.each(obj, function(key, val) {
    var next = key + ": ";
    next += $.isPlainObject(val) ? printObj(val) : val;
    arr.push( next );
  });
  return "{ " +  arr.join(", ") + " }";
};

$("#log").append( printObj(object1) );
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Merge defaults and options, without modifying the defaults. This is a common plugin development pattern.&lt;/p&gt;
		
		&lt;p&gt;
var defaults = { validate: false, limit: 5, name: "foo" };
var options = { validate: true, name: "bar" };

/* merge defaults and options, without modifying defaults */
var settings = $.extend({}, defaults, options);

var printObj = function(obj) {
  var arr = [];
  $.each(obj, function(key, val) {
    var next = key + ": ";
    next += $.isPlainObject(val) ? printObj(val) : val;
    arr.push( next );
  });
  return "{ " +  arr.join(", ") + " }";
};


$("#log").append( "&lt;div&gt;&lt;b&gt;settings -- &lt;/b&gt;" + printObj(settings) + "&lt;/div&gt;" );
$("#log").append( "&lt;div&gt;&lt;b&gt;options -- &lt;/b&gt;" + printObj(options) + "&lt;/div&gt;" );

&lt;/p&gt;
	</example>
        </examples>
      
			</method>
			<method name="fx" scope="static">
				<return-types>
					<return-type type="jQuery.fx"/>
				</return-types>
				<parameters>
					<parameter name="elem" type="Element" usage=""/>
					<parameter name="options" type="Object" usage=""/>
					<parameter name="prop" type="String" usage=""/>
					<parameter name="end" type="Number" usage="optional"/>
					<parameter name="easing" type="Boolean" usage="optional"/>
				</parameters>
			</method>
			<method name="get" scope="static">
				<parameters>
          <parameter name="url" type="String|URIString" usage="required">
            <description>A string containing the URL to which the request is sent.</description>
          </parameter>
          <parameter name="data" type="Map|String" usage="optional">
            <description>A map or string that is sent to the server with the request.</description>
          </parameter>
          <parameter name="success" type="Function(String,String,XMLHttpRequest)" usage="optional">
            <description>A callback function that is executed if the request succeeds.</description>
          </parameter>
          <parameter name="dataType" type="String" usage="optional">
            <description>The type of data expected from the server. Default: Intelligent Guess (xml, json, script, or html).</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.jqXHR"/>
        </return-types>
        <description>Load data from the server using a HTTP GET request.</description>
        <examples>
          <example>
			&lt;p&gt;Request the test.php page, but ignore the return results.&lt;/p&gt;
		
		&lt;p&gt;$.get("test.php");&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Request the test.php page and send some additional data along (while still ignoring the return results).&lt;/p&gt;
		
		&lt;p&gt;$.get("test.php", { name: "John", time: "2pm" } );&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;pass arrays of data to the server (while still ignoring the return results).&lt;/p&gt;
		
		&lt;p&gt;$.get("test.php", { 'choices[]': ["Jon", "Susan"]} );&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Alert out the results from requesting test.php (HTML or XML, depending on what was returned).&lt;/p&gt;
		
		&lt;p&gt;$.get("test.php", function(data){
alert("Data Loaded: " + data);
});&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Alert out the results from requesting test.cgi with an additional payload of data (HTML or XML, depending on what was returned).&lt;/p&gt;
		
		&lt;p&gt;$.get("test.cgi", { name: "John", time: "2pm" },
   function(data){
     alert("Data Loaded: " + data);
   });&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt; Gets the test.php page contents, which has been returned in json format (&lt;?php echo json_encode(array("name"=&gt;"John","time"=&gt;"2pm")); ?&gt;), and adds it to the page.&lt;/p&gt;
		
		&lt;p&gt;$.get("test.php",
   function(data){
     $('body').append("Name: " + data.name); // John
              .append("Time: " + data.time); //  2pm
   }, "json");&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="getJSON" scope="static">
				<parameters>
          <parameter name="url" type="String|URIString" usage="required">
            <description>A string containing the URL to which the request is sent.</description>
          </parameter>
          <parameter name="data" type="Object" usage="optional">
            <description>A map or string that is sent to the server with the request.</description>
          </parameter>
          <parameter name="success" type="Function(Object,String,XMLHttpRequest)" usage="optional">
            <description>A callback function that is executed if the request succeeds.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.jqXHR"/>
        </return-types>
        <description>Load JSON-encoded data from the server using a GET HTTP request.</description>
        <examples>
          <example>
			&lt;p&gt;Loads the four most recent cat pictures from the Flickr JSONP API.&lt;/p&gt;
		
		&lt;p&gt;
$.getJSON("http://api.flickr.com/services/feeds/photos_public.gne?jsoncallback=?",
  {
    tags: "cat",
    tagmode: "any",
    format: "json"
  },
  function(data) {
    $.each(data.items, function(i,item){
      $("&lt;img/&gt;").attr("src", item.media.m).appendTo("#images");
      if ( i == 3 ) return false;
    });
  });&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Load the JSON data from test.js and access a name from the returned JSON data.&lt;/p&gt;
		
		&lt;p&gt;$.getJSON("test.js", function(json) {
   alert("JSON Data: " + json.users[3].name);
 });&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Load the JSON data from test.js, passing along additional data, and access a name from the returned JSON data.&lt;/p&gt;
		
		&lt;p&gt;$.getJSON("test.js", { name: "John", time: "2pm" }, function(json) {
    alert("JSON Data: " + json.users[3].name);
    });&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="getScript" scope="static">
				<parameters>
          <parameter name="url" type="String|URIString" usage="required">
            <description>A string containing the URL to which the request is sent.</description>
          </parameter>
          <parameter name="success" type="Function(String,String,XMLHttpRequest)" usage="optional">
            <description>A callback function that is executed if the request succeeds.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.jqXHR"/>
        </return-types>
        <description>Load a JavaScript file from the server using a GET HTTP request, then execute it.</description>
        <examples>
          <example>
			&lt;p&gt;Load the official jQuery Color Animation plugin dynamically and bind some color animations to occur once the new functionality is loaded.&lt;/p&gt;
		
		&lt;p&gt;
$.getScript("http://dev.jquery.com/view/trunk/plugins/color/jquery.color.js", function() {
  $("#go").click(function(){
    $(".block").animate( { backgroundColor: "pink" }, 1000)
      .delay(500)
      .animate( { backgroundColor: "blue" }, 1000);
  });
});
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="globalEval" scope="static">
				<return-types>
					<return-type type="None"/>
				</return-types>
				<parameters>
          <parameter name="code" type="String" usage="required">
            <description>The JavaScript code to execute.</description>
          </parameter>
        </parameters>
        <description>Execute some JavaScript code globally.</description>
        <examples>
          <example>
			&lt;p&gt;Execute a script in the global context.&lt;/p&gt;
		
		&lt;p&gt;function test(){
    jQuery.globalEval("var newVar = true;")
}
test();
// newVar === true&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="grep" scope="static">
				<parameters>
          <parameter name="array" type="Array" usage="required">
            <description>The array to search through.</description>
          </parameter>
          <parameter name="function" type="Function(Object,Number)" usage="required">
            <description>The function to process each item against.  The first argument to the function is the item, and the second argument is the index.  The function should return a Boolean value.  </description>
          </parameter>
          <parameter name="invert" type="Boolean" usage="optional">
            <description>If "invert" is false, or not provided, then the function returns an array consisting of all elements for which "callback" returns true.  If "invert" is true, then the function returns an array consisting of all elements for which "callback" returns false.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Finds the elements of an array which satisfy a filter function. The original array is not affected.</description>
        <examples>
          <example>
			&lt;p&gt;Filters the original array of numbers leaving that are not 5 and have an index greater than 4.  Then it removes all 9s.&lt;/p&gt;
		
		&lt;p&gt;
var arr = [ 1, 9, 3, 8, 6, 1, 5, 9, 4, 7, 3, 8, 6, 9, 1 ];
$("div").text(arr.join(", "));

arr = jQuery.grep(arr, function(n, i){
  return (n != 5 &amp;&amp; i &gt; 4);
});
$("p").text(arr.join(", "));

arr = jQuery.grep(arr, function (a) { return a != 9; });
$("span").text(arr.join(", "));

&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Filter an array of numbers to include only numbers bigger then zero.&lt;/p&gt;
		
		&lt;p&gt;$.grep( [0,1,2], function(n,i){
   return n &gt; 0;
 });&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Filter an array of numbers to include numbers that are not bigger than zero.&lt;/p&gt;
		
		&lt;p&gt;$.grep( [0,1,2], function(n,i){
    return n &gt; 0;
},true);&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="hasData" scope="static">
				<parameters>
          <parameter name="element" type="Element" usage="required">
            <description>A DOM element to be checked for data.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Determine whether an element has any jQuery data associated with it.</description>
        <examples>
          <example>
			&lt;p&gt;Set data on an element and see the results of hasData.&lt;/p&gt;
		
		&lt;p&gt;
$(function(){
  var $p = jQuery("p"), p = $p[0];
  $p.append(jQuery.hasData(p)+" "); /* false */
  jQuery.data(p, "testing", 123);
  $p.append(jQuery.hasData(p)+" "); /* true*/
  jQuery.removeData(p, "testing");
  $p.append(jQuery.hasData(p)+" "); /* false */
});
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="holdReady" scope="static">
				<parameters>
          <parameter name="hold" type="Boolean" usage="required">
            <description>Indicates whether the ready hold is being requested or released</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Holds or releases the execution of jQuery's ready event.</description>
        <examples>
          <example>
			&lt;p&gt;Delay the ready event until a custom plugin has loaded.&lt;/p&gt;
		
		&lt;p&gt;
$.holdReady(true);
$.getScript("myplugin.js", function() {
     $.holdReady(false);
});
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="inArray" scope="static">
				<parameters>
          <parameter name="value" type="Object" usage="required">
            <description>The value to search for.</description>
          </parameter>
          <parameter name="array" type="Array" usage="required">
            <description>An array through which to search.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>Search for a specified value within an array and return its index (or -1 if not found).</description>
        <examples>
          <example>
			&lt;p&gt;Report the index of some elements in the array.&lt;/p&gt;
		
		&lt;p&gt;var arr = [ 4, "Pete", 8, "John" ];

$("span:eq(0)").text(jQuery.inArray("John", arr));
$("span:eq(1)").text(jQuery.inArray(4, arr));
$("span:eq(2)").text(jQuery.inArray("Karl", arr));

&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="isArray" scope="static">
				 <parameters>
          <parameter name="obj" type="Object" usage="required">
            <description>Object to test whether or not it is an array.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Determine whether the argument is an array.</description>
        <examples>
          <example>
			&lt;p&gt;Finds out if the parameter is an array.&lt;/p&gt;
		
		&lt;p&gt;$("b").append( "" + $.isArray([]) );&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="isEmptyObject" scope="static">
				<parameters>
          <parameter name="object" type="Object" usage="required">
            <description>The object that will be checked to see if it's empty.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Check to see if an object is empty (contains no properties).</description>
        <examples>
          <example>
			&lt;p&gt;Check an object to see if it's empty.&lt;/p&gt;
		
		&lt;p&gt;jQuery.isEmptyObject({}) // true
jQuery.isEmptyObject({ foo: "bar" }) // false&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="isFunction" scope="static">
				 <parameters>
          <parameter name="obj" type="Object" usage="required">
            <description>Object to test whether or not it is a function.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Determine if the argument passed is a Javascript function object. </description>
        <examples>
          <example>
			&lt;p&gt;Test a few parameter examples.&lt;/p&gt;
		
		&lt;p&gt;
    function stub() {
    }
    var objs = [
          function () {},
          { x:15, y:20 },
          null,
          stub,
          "function"
        ];

    jQuery.each(objs, function (i) {
      var isFunc = jQuery.isFunction(objs[i]);
      $("span").eq(i).text(isFunc);
    });
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Finds out if the parameter is a function.&lt;/p&gt;
		
		&lt;p&gt;$.isFunction(function(){});&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="isNumeric" scope="static">
				<return-types>
					<return-type type="Boolean"/>
				</return-types>
				<parameters>
					<parameter name="obj" type="Object" usage=""/>
				</parameters>
			</method>
			<method name="isPlainObject" scope="static">
				<parameters>
          <parameter name="object" type="Object" usage="required">
            <description>The object that will be checked to see if it's a plain object.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Check to see if an object is a plain object (created using "{}" or "new Object").</description>
        <examples>
          <example>
			&lt;p&gt;Check an object to see if it's a plain object.&lt;/p&gt;
		
		&lt;p&gt;jQuery.isPlainObject({}) // true
jQuery.isPlainObject("test") // false&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="isWindow" scope="static">
				<parameters>
          <parameter name="obj" type="Object" usage="required">
            <description>Object to test whether or not it is a window.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Determine whether the argument is a window.</description>
        <examples>
          <example>
			&lt;p&gt;Finds out if the parameter is a window.&lt;/p&gt;
		
		&lt;p&gt;$("b").append( "" + $.isWindow(window) );&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="isXMLDoc" scope="static">
				 <parameters>
          <parameter name="node" type="Element" usage="required">
            <description>The DOM node that will be checked to see if it's in an XML document.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Check to see if a DOM node is within an XML document (or is an XML document).</description>
        <examples>
          <example>
			&lt;p&gt;Check an object to see if it's in an XML document.&lt;/p&gt;
		
		&lt;p&gt;jQuery.isXMLDoc(document) // false
jQuery.isXMLDoc(document.body) // false&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="makeArray" scope="static">
				<parameters>
          <parameter name="obj" type="Object" usage="required">
            <description>Any object to turn into a native Array.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Convert an array-like object into a true JavaScript array.</description>
        <examples>
          <example>
			&lt;p&gt;Turn a collection of HTMLElements into an Array of them.&lt;/p&gt;
		
		&lt;p&gt;
    var elems = document.getElementsByTagName("div"); // returns a nodeList
    var arr = jQuery.makeArray(elems);
    arr.reverse(); // use an Array method on list of dom elements
    $(arr).appendTo(document.body);
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Turn a jQuery object into an array&lt;/p&gt;
		
		&lt;p&gt;
    var obj = $('li');
    var arr = $.makeArray(obj);
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="map" scope="static">
				<parameters>
          <parameter name="array" type="Array" usage="required">
            <description>The Array to translate.</description>
          </parameter>
          <parameter name="callback" type="Function(Object,Number)" usage="required">
            <description>The function to process each item against.  The first argument to the function is the array item, the second argument is the index in array The function can return any value. Within the function, </description>
          </parameter>
          <parameter name="arrayOrObject" type="Array|Object" usage="required">
            <description>The Array or Object to translate.</description>
          </parameter>
          <parameter name="callback" type="Function" usage="required">
            <description>The function to process each item against.  The first argument to the function is the value; the second argument is the index or key of the array or object property. The function can return any value to add to the array. A returned array will be flattened into the resulting array. Within the function, </description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Translate all items in an array or object to new array of items.</description>
        <examples>
          <example>
			&lt;p&gt;A couple examples of using .map()&lt;/p&gt;
		
		&lt;p&gt;
    var arr = [ "a", "b", "c", "d", "e" ];
    $("div").text(arr.join(", "));

    arr = jQuery.map(arr, function(n, i){
      return (n.toUpperCase() + i);
    });
    $("p").text(arr.join(", "));

    arr = jQuery.map(arr, function (a) { 
      return a + a; 
    });
    $("span").text(arr.join(", "));

&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Map the original array to a new one and add 4 to each value.&lt;/p&gt;
		
		&lt;p&gt;$.map( [0,1,2], function(n){
   return n + 4;
 });&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Maps the original array to a new one and adds 1 to each value if it is bigger then zero, otherwise it's removed.&lt;/p&gt;
		
		&lt;p&gt;$.map( [0,1,2], function(n){
   return n &gt; 0 ? n + 1 : null;
 });&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Map the original array to a new one; each element is added with its original value and the value plus one.&lt;/p&gt;
		
		&lt;p&gt;$.map( [0,1,2], function(n){
   return [ n, n + 1 ];
 });&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Map the original object to a new array and double each value.&lt;/p&gt;
		
		&lt;p&gt;
var dimensions = { width: 10, height: 15, length: 20 };
dimensions = $.map( dimensions, function( value, index ) {
  return value * 2;
}); &lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Map an object's keys to an array.&lt;/p&gt;
		
		&lt;p&gt;
var dimensions = { width: 10, height: 15, length: 20 },
    keys = $.map( dimensions, function( value, index ) {
      return index;
    }); &lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Maps the original array to a new one; each element is squared.&lt;/p&gt;
		
		&lt;p&gt;
$.map( [0,1,2,3], function (a) { 
  return a * a; 
});&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Remove items by returning null from the function. This removes any numbers less than 50, and the rest are decreased by 45.&lt;/p&gt;
		
		&lt;p&gt;
$.map( [0, 1, 52, 97], function (a) {
  return (a &gt; 50 ? a - 45 : null); 
});&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Augmenting the resulting array by returning an array inside the function.&lt;/p&gt;
		
		&lt;p&gt;var array = [0, 1, 52, 97];
array = $.map(array, function(a, index) {
  return [a - 45, index];
}); &lt;/p&gt;
	</example>
        </examples>
      
			</method>
			<method name="merge" scope="static">
				 <parameters>
          <parameter name="first" type="Array" usage="required">
            <description>The first array to merge, the elements of second added.</description>
          </parameter>
          <parameter name="second" type="Array" usage="required">
            <description>The second array to merge into the first, unaltered.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Merge the contents of two arrays together into the first array. </description>
        <examples>
          <example>
			&lt;p&gt;Merges two arrays, altering the first argument.&lt;/p&gt;
		
		&lt;p&gt;$.merge( [0,1,2], [2,3,4] )&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Merges two arrays, altering the first argument.&lt;/p&gt;
		
		&lt;p&gt;$.merge( [3,2,1], [4,3,2] )  &lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Merges two arrays, but uses a copy, so the original isn't altered.&lt;/p&gt;
		
		&lt;p&gt;var first = ['a','b','c'];
var second = ['d','e','f'];
$.merge( $.merge([],first), second);
      &lt;/p&gt;
	</example>
        </examples>
      
			</method>
			<method name="noConflict" scope="static">
				<parameters>
          <parameter name="removeAll" type="Boolean" usage="optional">
            <description>A Boolean indicating whether to remove all jQuery variables from the global scope (including jQuery itself).</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Relinquish jQuery's control of the </description>
        <examples>
          <example>
			&lt;p&gt;Maps the original object that was referenced by $ back to $.&lt;/p&gt;
		
		&lt;p&gt;jQuery.noConflict();
// Do something with jQuery
jQuery("div p").hide();
// Do something with another library's $()
$("content").style.display = 'none';&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Reverts the $ alias and then creates and executes a function to provide the $ as a jQuery alias inside the functions scope. Inside the function the original $ object is not available. This works well for most plugins that don't rely on any other library.  

&lt;/p&gt;
		
		&lt;p&gt;jQuery.noConflict();
(function($) { 
  $(function() {
    // more code using $ as alias to jQuery
  });
})(jQuery);
// other code using $ as an alias to the other library&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;You can chain the jQuery.noConflict() with the shorthand ready for a compact code.
&lt;/p&gt;
		
		&lt;p&gt;jQuery.noConflict()(function(){
    // code using jQuery
}); 
// other code using $ as an alias to the other library&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Creates a different alias instead of jQuery to use in the rest of the script.&lt;/p&gt;
		
		&lt;p&gt;var j = jQuery.noConflict();
// Do something with jQuery
j("div p").hide();
// Do something with another library's $()
$("content").style.display = 'none';&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Completely move jQuery to a new namespace in another object.&lt;/p&gt;
		
		&lt;p&gt;var dom = {};
dom.query = jQuery.noConflict(true);&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="noop" scope="static">
				<return-types>
          <return-type type="Function"/>
        </return-types>
        <description>An empty function.</description>
			</method>
			<method name="now" scope="static">
				<return-types>
          <return-type type="Number"/>
        </return-types>
        <description>Return a number representing the current time.</description>
			</method>
			<method name="param" scope="static">
				<parameters>
          <parameter name="obj" type="Array| Object" usage="required">
            <description>An array or object to serialize.</description>
          </parameter>
          <parameter name="obj" type="Array| Object" usage="required">
            <description>An array or object to serialize.</description>
          </parameter>
          <parameter name="traditional" type="Boolean" usage="required">
            <description>A Boolean indicating whether to perform a traditional "shallow" serialization.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Create a serialized representation of an array or object, suitable for use in a URL query string or Ajax request. </description>
        <examples>
          <example>
			&lt;p&gt;Serialize a key/value object.&lt;/p&gt;
		
		&lt;p&gt;

    var params = { width:1680, height:1050 };
    var str = jQuery.param(params);
    $("#results").text(str);
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Serialize a few complex objects&lt;/p&gt;
		
		&lt;p&gt;
// &lt;=1.3.2: 
$.param({ a: [2,3,4] }) // "a=2&amp;a=3&amp;a=4"
// &gt;=1.4:
$.param({ a: [2,3,4] }) // "a[]=2&amp;a[]=3&amp;a[]=4"

// &lt;=1.3.2: 
$.param({ a: { b:1,c:2 }, d: [3,4,{ e:5 }] }) // "a=[object+Object]&amp;d=3&amp;d=4&amp;d=[object+Object]"
// &gt;=1.4: 
$.param({ a: { b:1,c:2 }, d: [3,4,{ e:5 }] }) // "a[b]=1&amp;a[c]=2&amp;d[]=3&amp;d[]=4&amp;d[2][e]=5"

&lt;/p&gt;
	</example>
        </examples>
      
			</method>
			<method name="parseHTML" scope="static">
				<return-types>
					<return-type type="Array"/>
				</return-types>
				<parameters>
					<parameter name="data" type="String" usage=""/>
					<parameter name="context" type="Element" usage="optional"/>
					<parameter name="keepScripts" type="Boolean" usage="optional"/>
				</parameters>
			</method>
			<method name="parseJSON" scope="static">
				 <parameters>
          <parameter name="json" type="String" usage="required">
            <description>The JSON string to parse.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Takes a well-formed JSON string and returns the resulting JavaScript object.</description>
        <examples>
          <example>
			&lt;p&gt;Parse a JSON string.&lt;/p&gt;
		
		&lt;p&gt;var obj = jQuery.parseJSON('{"name":"John"}');
alert( obj.name === "John" );&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="parseXML" scope="static">
				<parameters>
          <parameter name="data" type="String" usage="required">
            <description>a well-formed XML string to be parsed</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="XMLDocument"/>
        </return-types>
        <description>Parses a string into an XML document.</description>
        <examples>
          <example>
			&lt;p&gt;Create a jQuery object using an XML string and obtain the value of the title node.&lt;/p&gt;
		
		&lt;p&gt;
var xml = "&lt;rss version='2.0'&gt;&lt;channel&gt;&lt;title&gt;RSS Title&lt;/title&gt;&lt;/channel&gt;&lt;/rss&gt;",
    xmlDoc = $.parseXML( xml ),
    $xml = $( xmlDoc ),
    $title = $xml.find( "title" );

/* append "RSS Title" to #someElement */
$( "#someElement" ).append( $title.text() );

/* change the title to "XML Title" */
$title.text( "XML Title" );

/* append "XML Title" to #anotherElement */
$( "#anotherElement" ).append( $title.text() );
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="post" scope="static">
				<parameters>
          <parameter name="url" type="String|URIString" usage="required">
            <description>A string containing the URL to which the request is sent.</description>
          </parameter>
          <parameter name="data" type="Object|String" usage="optional">
            <description>A map or string that is sent to the server with the request.</description>
          </parameter>
          <parameter name="success" type="Function(String,String,jQuery.jqXHR)" usage="optional">
            <description>A callback function that is executed if the request succeeds.</description>
          </parameter>
          <parameter name="dataType" type="String" usage="optional">
            <description>The type of data expected from the server. Default: Intelligent Guess (xml, json, script, or html).</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.jqXHR"/>
        </return-types>
        <description>Load data from the server using a HTTP POST request.</description>
        <examples>
          <example>
			&lt;p&gt;Request the test.php page, but ignore the return results.&lt;/p&gt;
		
		&lt;p&gt;$.post("test.php");&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Request the test.php page and send some additional data along (while still ignoring the return results).&lt;/p&gt;
		
		&lt;p&gt;$.post("test.php", { name: "John", time: "2pm" } );&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;pass arrays of data to the server (while still ignoring the return results).&lt;/p&gt;
		
		&lt;p&gt;$.post("test.php", { 'choices[]': ["Jon", "Susan"] });&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;send form data using ajax requests&lt;/p&gt;
		
		&lt;p&gt;$.post("test.php", $("#testform").serialize());&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Alert out the results from requesting test.php (HTML or XML, depending on what was returned).&lt;/p&gt;
		
		&lt;p&gt;$.post("test.php", function(data) {
   alert("Data Loaded: " + data);
 });&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Alert out the results from requesting test.php with an additional payload of data (HTML or XML, depending on what was returned).&lt;/p&gt;
		
		&lt;p&gt;$.post("test.php", { name: "John", time: "2pm" },
   function(data) {
     alert("Data Loaded: " + data);
   });&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Gets the test.php page content, store it in a XMLHttpResponse object and applies the process() JavaScript function.&lt;/p&gt;
		
		&lt;p&gt;$.post("test.php", { name: "John", time: "2pm" },
 function(data) {
   process(data);
 }, 
 "xml"
);&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Posts to the test.php page and gets contents which has been returned in json format (&lt;?php echo json_encode(array("name"=&gt;"John","time"=&gt;"2pm")); ?&gt;).&lt;/p&gt;
		
		&lt;p&gt;$.post("test.php", { "func": "getNameAndTime" },
 function(data){
   console.log(data.name); // John
   console.log(data.time); //  2pm
 }, "json");&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Post a form using ajax and put results in a div&lt;/p&gt;
		
		&lt;p&gt;
  /* attach a submit handler to the form */
  $("#searchForm").submit(function(event) {

    /* stop form from submitting normally */
    event.preventDefault(); 
        
    /* get some values from elements on the page: */
    var $form = $( this ),
        term = $form.find( 'input[name="s"]' ).val(),
        url = $form.attr( 'action' );

    /* Send the data using post and put the results in a div */
    $.post( url, { s: term },
      function( data ) {
          var content = $( data ).find( '#content' );
          $( "#result" ).empty().append( content );
      }
    );
  });
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="proxy" scope="static">
				<parameters>
          <parameter name="function" type="Function" usage="required">
            <description>The function whose context will be changed.</description>
          </parameter>
          <parameter name="context" type="Object" usage="required">
            <description>The object to which the context (</description>
          </parameter>
          <parameter name="context" type="Object" usage="required">
            <description>The object to which the context of the function should be set.</description>
          </parameter>
          <parameter name="name" type="String" usage="required">
            <description>The name of the function whose context will be changed (should be a property of the </description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Function"/>
        </return-types>
        <description>Takes a function and returns a new one that will always have a particular context.</description>
        <examples>
          <example>
			&lt;p&gt;Change the context of functions bound to a click handler using the "function, context" signature. Unbind the first handler after first click.&lt;/p&gt;
		
		&lt;p&gt;
var me = {
  type: "zombie",
  test: function(event) {
    // Without proxy, `this` would refer to the event target
    // use event.target to reference that element.
    var element = event.target;
    $(element).css("background-color", "red");

    // With proxy, `this` refers to the me object encapsulating
    // this function.
    $("#log").append( "Hello " + this.type + "&lt;br&gt;" );
    $("#test").unbind("click", this.test);
  }
};

var you = {
  type: "person",
  test: function(event) {
    $("#log").append( this.type + " " );
  }
};

// execute you.test() in the context of the `you` object
// no matter where it is called
// i.e. the `this` keyword will refer to `you`
var youClick = $.proxy( you.test, you );


// attach click handlers to #test
$("#test")
  // this === "zombie"; handler unbound after first click
  .click( $.proxy( me.test, me ) )
  // this === "person"
  .click( youClick )
  // this === "zombie"
  .click( $.proxy( you.test, me ) )
  // this === "&lt;button&gt; element"
  .click( you.test );
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Enforce the context of the function using the "context, function name" signature. Unbind the handler after first click.&lt;/p&gt;
		
		&lt;p&gt;
  var obj = {
    name: "John",
    test: function() {
      $("#log").append( this.name );
      $("#test").unbind("click", obj.test);
    }
  };

  $("#test").click( jQuery.proxy( obj, "test" ) );
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="queue" scope="static">
				<parameters>
          <parameter name="element" type="Element" usage="required">
            <description>A DOM element to inspect for an attached queue.</description>
          </parameter>
          <parameter name="queueName" type="String" usage="optional">
            <description>A string containing the name of the queue. Defaults to </description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Show the queue of functions to be executed on the matched element.</description>
        <examples>
          <example>
			&lt;p&gt;Show the length of the queue.&lt;/p&gt;
		
		&lt;p&gt;$("#show").click(function () {
      var n = jQuery.queue( $("div")[0], "fx" );
      $("span").text("Queue length is: " + n.length);
    });
    function runIt() {
      $("div").show("slow");
      $("div").animate({left:'+=200'},2000);
      $("div").slideToggle(1000);
      $("div").slideToggle("fast");
      $("div").animate({left:'-=200'},1500);
      $("div").hide("slow");
      $("div").show(1200);
      $("div").slideUp("normal", runIt);
    }
    runIt();&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="removeData" scope="static">
				<parameters>
          <parameter name="element" type="Element" usage="required">
            <description>A DOM element from which to remove data.</description>
          </parameter>
          <parameter name="name" type="String" usage="optional">
            <description>A string naming the piece of data to remove.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Remove a previously-stored piece of data.</description>
        <examples>
          <example>
			&lt;p&gt;Set a data store for 2 names then remove one of them.&lt;/p&gt;
		
		&lt;p&gt;
var div = $("div")[0];
$("span:eq(0)").text("" + $("div").data("test1"));
jQuery.data(div, "test1", "VALUE-1");
jQuery.data(div, "test2", "VALUE-2");
$("span:eq(1)").text("" + jQuery.data(div, "test1"));
jQuery.removeData(div, "test1");
$("span:eq(2)").text("" + jQuery.data(div, "test1"));
$("span:eq(3)").text("" + jQuery.data(div, "test2"));&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="trim" scope="static">
				<parameters>
          <parameter name="str" type="String" usage="required">
            <description>The string to trim.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Remove the whitespace from the beginning and end of a string.</description>
        <examples>
          <example>
			&lt;p&gt;Remove the two white spaces at the start and at the end of the string.&lt;/p&gt;
		
		&lt;p&gt;

$("button").click(function () {
var str = "     lots of spaces before and after     ";
alert("'" + str + "'");

str = jQuery.trim(str);
alert("'" + str + "' - no longer");
});

&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Remove the two white spaces at the start and at the end of the string.&lt;/p&gt;
		
		&lt;p&gt;$.trim("  hello, how are you?  ");&lt;/p&gt;
	</example>
        </examples>
      
			</method>
			<method name="type" scope="static">
				<parameters>
          <parameter name="obj" type="Object" usage="required">
            <description>Object to get the internal JavaScript [[Class]] of.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Determine the internal JavaScript [[Class]] of an object.</description>
        <examples>
          <example>
			&lt;p&gt;Find out if the parameter is a RegExp.&lt;/p&gt;
		
		&lt;p&gt;$("b").append( "" + jQuery.type(/test/) );&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="unique" scope="static">
				<parameters>
          <parameter name="array" type="Array" usage="required">
            <description>The Array of DOM elements.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers.</description>
        <examples>
          <example>
			&lt;p&gt;Removes any duplicate elements from the array of divs.&lt;/p&gt;
		
		&lt;p&gt;

    var divs = $("div").get(); // unique() must take a native array

    // add 3 elements of class dup too (they are divs)
    divs = divs.concat($(".dup").get());
    $("div:eq(1)").text("Pre-unique there are " + divs.length + " elements.");

    divs = jQuery.unique(divs);
    $("div:eq(2)").text("Post-unique there are " + divs.length + " elements.")
                  .css("color", "red");

&lt;/p&gt;
	</example>
        </examples>
      
			</method>
			<method name="when" scope="static">
				<parameters>
          <parameter name="deferreds" type="jQuery.Deferred" usage="required">
            <description>One or more Deferred objects, or plain JavaScript objects.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.Promise"/>
        </return-types>
        <description>Provides a way to execute callback functions based on one or more objects, usually </description>
        <examples>
          <example>
			&lt;p&gt;Execute a function after two ajax requests are successful. (See the jQuery.ajax() documentation for a complete description of success and error cases for an ajax request).&lt;/p&gt;
		
		&lt;p&gt;$.when($.ajax("/page1.php"), $.ajax("/page2.php")).done(function(a1,  a2){
    /* a1 and a2 are arguments resolved for the 
        page1 and page2 ajax requests, respectively */
   var jqXHR = a1[2]; /* arguments are [ "success", statusText, jqXHR ] */
   if ( /Whip It/.test(jqXHR.responseText) ) {
      alert("First page has 'Whip It' somewhere.");
   }
});
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Execute the function myFunc when both ajax requests are successful, or myFailure if either one has an error.&lt;/p&gt;
		
		&lt;p&gt;$.when($.ajax("/page1.php"), $.ajax("/page2.php"))
  .then(myFunc, myFailure);
&lt;/p&gt;
	</example>
        </examples>
			</method>
		</methods>
		<properties>
			<property type="jQuery.fn" name="fn" scope="static"></property>
			<property type="Object" name="cssHooks" scope="static">
				<description>Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties.</description>
			</property>
			<property type="jQuery.Promise" name="Promise" scope="static">
				<description>A constructor function that returns a chainable utility object with methods to register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function.</description>
			</property>
			<property type="jQuery.jqXHR" name="jqXHR" scope="static"></property>
			<property type="jQuery.support" name="support" scope="static">
				<description>A collection of properties that represent the presence of different browser features or bugs. Primarily intended for jQuery's internal use; specific properties may be removed when they are no longer needed internally to improve page startup performance.</description>
			</property>
		</properties>
	</class>
	<class type="jQuery.fn" superclass="Object">
		<methods>
			<method name="add" >
				<parameters>
          <parameter name="selector" type="Selector|SelectorString|HTMLString|Element|jQuery.fn" usage="required">
            <description>A string representing a selector expression to find additional elements to add to the set of matched elements.</description>
          </parameter>
          <parameter name="context" type="Element" usage="required">
            <description>The point in the document at which the selector should begin matching; similar to the context argument of the </description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Add elements to the set of matched elements.</description>
        <examples>
          <example>
			&lt;p&gt;Finds all divs and makes a border.  Then adds all paragraphs to the jQuery object to set their backgrounds yellow.&lt;/p&gt;
		
		&lt;p&gt;

$("div").css("border", "2px solid red")
        .add("p")
        .css("background", "yellow");
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Adds more elements, matched by the given expression, to the set of matched elements.&lt;/p&gt;
		
		&lt;p&gt;$("p").add("span").css("background", "yellow");&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Adds more elements, created on the fly, to the set of matched elements.&lt;/p&gt;
		
		&lt;p&gt;$("p").clone().add("&lt;span&gt;Again&lt;/span&gt;").appendTo(document.body);&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Adds one or more Elements to the set of matched elements.&lt;/p&gt;
		
		&lt;p&gt;$("p").add(document.getElementById("a")).css("background", "yellow");&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Demonstrates how to add (or push) elements to an existing collection&lt;/p&gt;
		
		&lt;p&gt;var collection = $("p");
// capture the new collection
collection = collection.add(document.getElementById("a"));
collection.css("background", "yellow");&lt;/p&gt;
	</example>
        </examples>
     
			</method>
			<method name="addBack" >
				<return-types>
					<return-type type="jQuery.fn"/>
				</return-types>
				<parameters>
					<parameter name="selector" type="String|SelectorString" usage="optional"/>
				</parameters>
			</method>
			<method name="addClass" >
				<parameters>
          <parameter name="className" type="String|ClassString|Function(Number,String|ClassString)" usage="required">
            <description>One or more class names to be added to the class attribute of each matched element.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Adds the specified class(es) to each of the set of matched elements.</description>
        <examples>
          <example>
			&lt;p&gt;Adds the class "selected" to the matched elements.&lt;/p&gt;
		
		&lt;p&gt;
  $("p:last").addClass("selected");
  &lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Adds the classes "selected" and "highlight" to the matched elements.&lt;/p&gt;
		
		&lt;p&gt;
  $("p:last").addClass("selected highlight");
  &lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Pass in a function to .addClass() to add the "green" class to a div that already has a "red" class.&lt;/p&gt;
		
		&lt;p&gt;
  $("div").addClass(function(index, currentClass) {
    var addedClass;

    if ( currentClass === "red" ) {
      addedClass = "green";
      $("p").text("There is one green div");
    }
  
    return addedClass;
  });
&lt;/p&gt;
	</example>
        </examples>
      
			</method>
			<method name="after" >
				<parameters>
          <parameter name="content" type="HTMLString|Element|Array|jQuery.fn" usage="required">
            <description>HTML string, DOM element, or jQuery object to insert after each element in the set of matched elements.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Insert content, specified by the parameter, after each element in the set of matched elements.</description>
        <examples>
          <example>
			&lt;p&gt;Inserts some HTML after all paragraphs.&lt;/p&gt;
		
		&lt;p&gt;$("p").after("&lt;b&gt;Hello&lt;/b&gt;");&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Inserts a DOM element after all paragraphs.&lt;/p&gt;
		
		&lt;p&gt;$("p").after( document.createTextNode("Hello") );&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Inserts a jQuery object (similar to an Array of DOM Elements) after all paragraphs.&lt;/p&gt;
		
		&lt;p&gt;$("p").after( $("b") );&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="ajaxComplete" >
				 <parameters>
          <parameter name="handler" type="Function(jQuery.Event,XMLHttpRequest)" usage="required">
            <description>The function to be invoked.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Register a handler to be called when Ajax requests complete. This is an </description>
        <examples>
          <example>
			&lt;p&gt;Show a message when an Ajax request completes.&lt;/p&gt;
		
		&lt;p&gt;$("#msg").ajaxComplete(function(event,request, settings){
   $(this).append("&lt;li&gt;Request Complete.&lt;/li&gt;");
 });&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="ajaxError" >
				 <parameters>
          <parameter name="handler" type="Function(jQuery.Event,XMLHttpRequest)" usage="required">
            <description>The function to be invoked.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Register a handler to be called when Ajax requests complete with an error. This is an </description>
        <examples>
          <example>
			&lt;p&gt;Show a message when an Ajax request fails.&lt;/p&gt;
		
		&lt;p&gt;$("#msg").ajaxError(function(event, request, settings){
  $(this).append("&lt;li&gt;Error requesting page " + settings.url + "&lt;/li&gt;");
});&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="ajaxSend" >
				<parameters>
          <parameter name="handler" type="Function(jQuery.Event,XMLHttpRequest)" usage="required">
            <description>The function to be invoked.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Attach a function to be executed before an Ajax request is sent. This is an </description>
        <examples>
          <example>
			&lt;p&gt;Show a message before an Ajax request is sent.&lt;/p&gt;
		
		&lt;p&gt;$("#msg").ajaxSend(function(evt, request, settings){
        $(this).append("&lt;li&gt;Starting request at " + settings.url + "&lt;/li&gt;");
      });&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="ajaxStart" >
				<parameters>
          <parameter name="handler" type="Function" usage="required">
            <description>The function to be invoked.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Register a handler to be called when the first Ajax request begins. This is an </description>
        <examples>
          <example>
			&lt;p&gt;Show a loading message whenever an Ajax request starts (and none is already active).&lt;/p&gt;
		
		&lt;p&gt;$("#loading").ajaxStart(function(){
   $(this).show();
 });&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="ajaxStop" >
				<parameters>
          <parameter name="handler" type="Function" usage="required">
            <description>The function to be invoked.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Register a handler to be called when all Ajax requests have completed. This is an </description>
        <examples>
          <example>
			&lt;p&gt;Hide a loading message after all the Ajax requests have stopped.&lt;/p&gt;
		
		&lt;p&gt;$("#loading").ajaxStop(function(){
      $(this).hide();
      });&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="ajaxSuccess" >
				<parameters>
          <parameter name="handler" type="Function(jQuery.Event,XMLHttpRequest)" usage="required">
            <description>The function to be invoked.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Attach a function to be executed whenever an Ajax request completes successfully. This is an </description>
        <examples>
          <example>
			&lt;p&gt;Show a message when an Ajax request completes successfully.&lt;/p&gt;
		
		&lt;p&gt;$("#msg").ajaxSuccess(function(evt, request, settings){
      $(this).append("&lt;li&gt;Successful Request!&lt;/li&gt;");
      });&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="animate" >
				<parameters>
          <parameter name="properties" type="Object" usage="required">
            <description>A map of CSS properties that the animation will move toward.</description>
          </parameter>
          <parameter name="duration" type="String|Number" usage="optional">
            <description>A string or number determining how long the animation will run.</description>
          </parameter>
          <parameter name="easing" type="String" usage="optional">
            <description>A string indicating which easing function to use for the transition.</description>
          </parameter>
          <parameter name="complete" type="Function" usage="optional">
            <description>A function to call once the animation is complete.</description>
          </parameter>
          <parameter name="properties" type="Map" usage="required">
            <description>A map of CSS properties that the animation will move toward.</description>
          </parameter>
          <parameter name="options" type="Map" usage="required">
            <description>A map of additional options to pass to the method. Supported keys:
        </description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Perform a custom animation of a set of CSS properties.</description>
        <examples>
          <example>
			&lt;p&gt;Click the button to animate the div with a number of different properties.&lt;/p&gt;
		
		&lt;p&gt;

/* Using multiple unit types within one animation. */

$("#go").click(function(){
  $("#block").animate({
    width: "70%",
    opacity: 0.4,
    marginLeft: "0.6in",
    fontSize: "3em",
    borderWidth: "10px"
  }, 1500 );
});
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Animates a div's left property with a relative value. Click several times on the buttons to see the relative animations queued up.&lt;/p&gt;
		
		&lt;p&gt;
$("#right").click(function(){
  $(".block").animate({"left": "+=50px"}, "slow");
});

$("#left").click(function(){
  $(".block").animate({"left": "-=50px"}, "slow");
});

&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;The first button shows how an unqueued animation works.  It expands the div out to 90% width while the font-size is increasing. Once the font-size change is complete, the border animation will begin.

The second button starts a traditional chained animation, where each animation will start once the previous animation on the element has completed.&lt;/p&gt;
		
		&lt;p&gt;

$( "#go1" ).click(function(){
  $( "#block1" ).animate( { width: "90%" }, { queue: false, duration: 3000 })
     .animate({ fontSize: "24px" }, 1500 )
     .animate({ borderRightWidth: "15px" }, 1500 );
});

$( "#go2" ).click(function(){
  $( "#block2" ).animate({ width: "90%" }, 1000 )
     .animate({ fontSize: "24px" }, 1000 )
     .animate({ borderLeftWidth: "15px" }, 1000 );
});

$( "#go3" ).click(function(){
  $( "#go1" ).add( "#go2" ).click();
});

$( "#go4" ).click(function(){
  $( "div" ).css({ width: "", fontSize: "", borderWidth: "" });
});

&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Animates the first div's left property and synchronizes the remaining divs, using the step function to set their left properties at each stage of the animation. &lt;/p&gt;
		
		&lt;p&gt;
$( "#go" ).click(function(){
  $( ".block:first" ).animate({
    left: 100
  }, {
    duration: 1000,
    step: function( now, fx ){
      $( ".block:gt(0)" ).css( "left", now );
    }
  });
});
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Animates all paragraphs to toggle both height and opacity, completing the animation within 600 milliseconds.&lt;/p&gt;
		
		&lt;p&gt;$( "p" ).animate({
  "height": "toggle", "opacity": "toggle"
}, "slow" );&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Animates all paragraph to a left style of 50 and opacity of 1 (opaque, visible), completing the animation within 500 milliseconds.&lt;/p&gt;
		
		&lt;p&gt;$( "p" ).animate({
  "left": "50", "opacity": 1
}, 500 );
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;An example of using an 'easing' function to provide a different style of animation. This will only work if you have a plugin that provides this easing function.  Note, this code will do nothing unless the paragraph element is hidden.&lt;/p&gt;
		
		&lt;p&gt;$( "p" ).animate({
  "opacity": "show"
}, "slow", "easein" );&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Animates all paragraphs to toggle both height and opacity, completing the animation within 600 milliseconds.&lt;/p&gt;
		
		&lt;p&gt;$( "p" ).animate({
  "height": "toggle", "opacity": "toggle"
}, { duration: "slow" });&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Animates all paragraph to a left style of 50 and opacity of 1 (opaque, visible), completing the animation within 500 milliseconds.  It also will do it outside the queue, meaning it will automatically start without waiting for its turn.&lt;/p&gt;
		
		&lt;p&gt;$( "p" ).animate({
  left: "50px", opacity: 1
}, { duration: 500, queue: false });&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;An example of using an 'easing' function to provide a different style of animation. This will only work if you have a plugin that provides this easing function.&lt;/p&gt;
		
		&lt;p&gt;$( "p" ).animate({
  "opacity": "show"
}, { "duration": "slow", "easing": "easein" });&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;An example of using a callback function.  The first argument is an array of CSS properties, the second specifies that the animation should take 1000 milliseconds to complete, the third states the easing type, and the fourth argument is an anonymous callback function. &lt;/p&gt;
		
		&lt;p&gt;$( "p" ).animate({
  height:200, width:400, opacity: .5
}, 1000, "linear", function(){ alert("all done"); });
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="append" >
				<parameters>
          <parameter name="content" type="HTMLString|Element|Array|jQuery.fn|String" usage="required">
            <description>DOM element, HTML string, or jQuery object to insert at the end of each element in the set of matched elements.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Insert content, specified by the parameter, to the end of each element in the set of matched elements.</description>
        <examples>
          <example>
			&lt;p&gt;Appends some HTML to all paragraphs.&lt;/p&gt;
		
		&lt;p&gt;
  $("p").append("&lt;strong&gt;Hello&lt;/strong&gt;");
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Appends an Element to all paragraphs.&lt;/p&gt;
		
		&lt;p&gt;
  $("p").append(document.createTextNode("Hello"));
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Appends a jQuery object (similar to an Array of DOM Elements) to all paragraphs.&lt;/p&gt;
		
		&lt;p&gt;
  $("p").append( $("strong") );
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="appendTo" >
				 <parameters>
          <parameter name="target" type="Element|Array|jQuery.fn|SelectorString" usage="required">
            <description>A selector, element, HTML string, or jQuery object; the matched set of elements will be inserted at the end of the element(s) specified by this parameter.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Insert every element in the set of matched elements to the end of the target.</description>
        <examples>
          <example>
			&lt;p&gt;Appends all spans to the element with the ID "foo"&lt;/p&gt;
		
		&lt;p&gt;$("span").appendTo("#foo"); // check append() examples&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="attr" >
				<parameters>
          <parameter name="attributeName" type="String|AttrString|HTMLElement" usage="required">
            <description>The name of the attribute to get.</description>
          </parameter>
          <parameter name="value" type="String|Number|AttrValueString" usage="required">
            <description>A value to set for the attribute.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Get the value of an attribute for the first element in the set of matched elements.</description>
        <examples>
          <example>
			&lt;p&gt;Find the title attribute of the first &lt;em&gt; in the page.&lt;/p&gt;
		
		&lt;p&gt;
var title = $("em").attr("title");
  $("div").text(title);
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="before" >
				<parameters>
          <parameter name="content" type="String| Element| jQuery.fn|HTMLString" usage="required">
            <description>HTML string, DOM element, or jQuery object to insert before each element in the set of matched elements.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Insert content, specified by the parameter, before each element in the set of matched elements.</description>
        <examples>
          <example>
			&lt;p&gt;Inserts some HTML before all paragraphs.&lt;/p&gt;
		
		&lt;p&gt;$("p").before("&lt;b&gt;Hello&lt;/b&gt;");&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Inserts a DOM element before all paragraphs.&lt;/p&gt;
		
		&lt;p&gt;$("p").before( document.createTextNode("Hello") );&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Inserts a jQuery object (similar to an Array of DOM Elements) before all paragraphs.&lt;/p&gt;
		
		&lt;p&gt;$("p").before( $("b") );&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="bind" >
				<parameters>
          <parameter name="eventType" type="String|EventString" usage="required">
            <description>A string containing one or more JavaScript event types, such as "click" or "submit," or custom event names.</description>
          </parameter>
          <parameter name="eventData" type="Object" usage="optional">
            <description>A map of data that will be passed to the event handler.</description>
          </parameter>
          <parameter name="handler" type="Function(jQuery.Event)" usage="required">
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Attach a handler to an event for the elements.</description>
        <examples>
          <example>
			&lt;p&gt;Handle click and double-click for the paragraph.  Note: the coordinates are window relative, so in this case relative to the demo iframe.&lt;/p&gt;
		
		&lt;p&gt;
$("p").bind("click", function(event){
var str = "( " + event.pageX + ", " + event.pageY + " )";
$("span").text("Click happened! " + str);
});
$("p").bind("dblclick", function(){
$("span").text("Double-click happened in " + this.nodeName);
});
$("p").bind("mouseenter mouseleave", function(event){
$(this).toggleClass("over");
});

&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;To display each paragraph's text in an alert box whenever it is clicked:&lt;/p&gt;
		
		&lt;p&gt;$("p").bind("click", function(){
alert( $(this).text() );
});&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;You can pass some extra data before the event handler:&lt;/p&gt;
		
		&lt;p&gt;function handler(event) {
alert(event.data.foo);
}
$("p").bind("click", {foo: "bar"}, handler)&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Cancel a default action and prevent it from bubbling up by returning false:&lt;/p&gt;
		
		&lt;p&gt;$("form").bind("submit", function() { return false; })&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Cancel only the default action by using the .preventDefault() method.&lt;/p&gt;
		
		&lt;p&gt;$("form").bind("submit", function(event) {
event.preventDefault();
});&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Stop an event from bubbling without preventing the default action by using the .stopPropagation() method.&lt;/p&gt;
		
		&lt;p&gt;$("form").bind("submit", function(event) {
  event.stopPropagation();
});&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Bind custom events.&lt;/p&gt;
		
		&lt;p&gt;

$("p").bind("myCustomEvent", function(e, myName, myValue){
$(this).text(myName + ", hi there!");
$("span").stop().css("opacity", 1)
.text("myName = " + myName)
.fadeIn(30).fadeOut(1000);
});
$("button").click(function () {
$("p").trigger("myCustomEvent", [ "John" ]);
});

&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Bind multiple events simultaneously.&lt;/p&gt;
		
		&lt;p&gt;$("div.test").bind({
  click: function(){
    $(this).addClass("active");
  },
  mouseenter: function(){
    $(this).addClass("inside");
  },
  mouseleave: function(){
    $(this).removeClass("inside");
  }
});&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="focus" scope="instance">
        <parameters>
          <parameter name="eventData" type="Object" usage="optional">
            <description>A map of data that will be passed to the event handler.</description>
          </parameter>
          <parameter name="handler" type="Function" usage="required">
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Bind an event handler to the "focus" JavaScript event, or trigger that event on an element.</description>
        <examples>
          <example>
			&lt;p&gt;Fire focus.&lt;/p&gt;
		
		&lt;p&gt;
    $("input").focus(function () {
         $(this).next("span").css('display','inline').fadeOut(1000);
    });
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;To stop people from writing in text input boxes, try:&lt;/p&gt;
		
		&lt;p&gt;$("input[type=text]").focus(function(){
  $(this).blur();
});&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;To focus on a login input box with id 'login' on page startup, try:&lt;/p&gt;
		
		&lt;p&gt;$(document).ready(function(){
  $("#login").focus();
});&lt;/p&gt;
	</example>
        </examples>
      </method>
			<method name="blur" >
				<parameters>
          <parameter name="eventData" type="Object" usage="optional">
            <description>A map of data that will be passed to the event handler.</description>
          </parameter>
          <parameter name="handler" type="Function" usage="required">
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Bind an event handler to the "blur" JavaScript event, or trigger that event on an element.</description>
        <examples>
          <example>
			&lt;p&gt;To trigger the blur event on all paragraphs:&lt;/p&gt;
		
		&lt;p&gt;$("p").blur();&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="change" >
				<parameters>
          <parameter name="eventData" type="Object" usage="optional">
            <description>A map of data that will be passed to the event handler.</description>
          </parameter>
          <parameter name="handler" type="Function" usage="required">
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Bind an event handler to the "change" JavaScript event, or trigger that event on an element.</description>
        <examples>
          <example>
			&lt;p&gt;Attaches a change event to the select that gets the text for each selected option and writes them in the div.  It then triggers the event for the initial text draw.&lt;/p&gt;
		
		&lt;p&gt;
    $("select").change(function () {
          var str = "";
          $("select option:selected").each(function () {
                str += $(this).text() + " ";
              });
          $("div").text(str);
        })
        .change();
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;To add a validity test to all text input elements:&lt;/p&gt;
		
		&lt;p&gt;$("input[type='text']").change( function() {
  // check input ($(this).val()) for validity here
});&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="children" >
				<parameters>
          <parameter name="selector" type="Selector|SelectorString" usage="optional">
            <description>A string containing a selector expression to match elements against.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Get the children of each element in the set of matched elements, optionally filtered by a selector.</description>
        <examples>
          <example>
			&lt;p&gt;Find all children of the clicked element.&lt;/p&gt;
		
		&lt;p&gt;

    $("#container").click(function (e) {
      $("*").removeClass("hilite");
      var $kids = $(e.target).children();
      var len = $kids.addClass("hilite").length;

      $("#results span:first").text(len);
      $("#results span:last").text(e.target.tagName);

      e.preventDefault();
      return false;
    });
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Find all children of each div.&lt;/p&gt;
		
		&lt;p&gt;$("div").children().css("border-bottom", "3px double red");&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Find all children with a class "selected" of each div.&lt;/p&gt;
		
		&lt;p&gt;$("div").children(".selected").css("color", "blue");&lt;/p&gt;
	</example>
        </examples>
      
			</method>
			<method name="click" >
				<parameters>
          <parameter name="eventData" type="Object" usage="optional">
            <description>A map of data that will be passed to the event handler.</description>
          </parameter>
          <parameter name="handler" type="Function(jQuery.Event)" usage="required">
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Bind an event handler to the "click" JavaScript event, or trigger that event on an element.</description>
        <examples>
          <example>
			&lt;p&gt;To hide paragraphs on a page when they are clicked:&lt;/p&gt;
		
		&lt;p&gt;
    $("p").click(function () { 
      $(this).slideUp(); 
    });
    $("p").hover(function () {
      $(this).addClass("hilite");
    }, function () {
      $(this).removeClass("hilite");
    });
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;To trigger the click event on all of the paragraphs on the page:&lt;/p&gt;
		
		&lt;p&gt;$("p").click();&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="clone" >
				<parameters>
          <parameter name="withDataAndEvents" type="Boolean" usage="optional">
            <description>A Boolean indicating whether event handlers should be copied along with the elements. As of jQuery 1.4, element data will be copied as well.</description>
          </parameter>
          <parameter name="deepWithDataAndEvents" type="Boolean" usage="optional">
            <description>A Boolean indicating whether event handlers and data for all children of the cloned element should be copied. By default its value matches the first argument's value (which defaults to </description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Create a deep copy of the set of matched elements.</description>
        <examples>
          <example>
			&lt;p&gt;Clones all b elements (and selects the clones) and prepends them to all paragraphs.&lt;/p&gt;
		
		&lt;p&gt;
  $("b").clone().prependTo("p");
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;When using .clone() to clone a collection of elements that are not attached to the DOM, their order when inserted into the DOM is not guaranteed. However, it may be possible to preserve sort order with a workaround, as demonstrated:&lt;/p&gt;
		
		&lt;p&gt;
// sort order is not guaranteed here and may vary with browser  
$('#copy').append($('#orig .elem')
          .clone()
          .children('a')
          .prepend('foo - ')
          .parent()
          .clone()); 
 
// correct way to approach where order is maintained
$('#copy-correct')
          .append($('#orig .elem')
          .clone()
          .children('a')
          .prepend('bar - ')
          .end()); 
&lt;/p&gt;
	</example>
        </examples>
      
			</method>
			<method name="closest" >
				<parameters>
          <parameter name="selector" type="Selector|SelectorString" usage="required">
            <description>A string containing a selector expression to match elements against.</description>
          </parameter>
          <parameter name="context" type="Element" usage="optional">
            <description>A DOM element within which a matching element may be found. If no context is passed in then the context of the jQuery set will be used instead.</description>
          </parameter>
          <parameter name="jQuery object" type="jQuery" usage="required">
            <description>A jQuery object to match elements against.</description>
          </parameter>
          <parameter name="element" type="Element" usage="required">
            <description>An element to match elements against.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Get the first ancestor element that matches the selector, beginning at the current element and progressing up through the DOM tree.</description>
        <examples>
          <example>
			&lt;p&gt;Show how event delegation can be done with closest. The closest list element toggles a yellow background when it or its descendent is clicked.&lt;/p&gt;
		
		&lt;p&gt;
  $( document ).bind("click", function( e ) {
    $( e.target ).closest("li").toggleClass("hilight");
  });
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Pass a jQuery object to closest. The closest list element toggles a yellow background when it or its descendent is clicked.&lt;/p&gt;
		
		&lt;p&gt;
  var $listElements = $("li").css("color", "blue");
  $( document ).bind("click", function( e ) {
    $( e.target ).closest( $listElements ).toggleClass("hilight");
  });
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="contents" >
				<return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Get the children of each element in the set of matched elements, including text and comment nodes.</description>
        <examples>
          <example>
			&lt;p&gt;Find all the text nodes inside a paragraph and wrap them with a bold tag.&lt;/p&gt;
		
		&lt;p&gt;$("p").contents().filter(function(){ return this.nodeType != 1; }).wrap("&lt;b/&gt;");&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Change the background colour of links inside of an iframe.&lt;/p&gt;
		
		&lt;p&gt;$("#frameDemo").contents().find("a").css("background-color","#BADA55");&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="context" >
				<return-types>
					<return-type type="Element"/>
				</return-types>
			</method>
			<method name="css" >
				<parameters>
          <parameter name="propertyName" type="String|cssPropertyString|cssObject" usage="required">
            <description>A CSS property.</description>
          </parameter>
          <parameter name="propertyvalue" type="String|cssPropertyValueString|Function(Number,String|cssPropertyValueString)" usage="required">
          </parameter>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Get the value of a style property for the first element in the set of matched elements.</description>
        <examples>
          <example>
			&lt;p&gt;To access the background color of a clicked div.&lt;/p&gt;
		
		&lt;p&gt;
$("div").click(function () {
  var color = $(this).css("background-color");
  $("#result").html("That div is &lt;span style='color:" +
                     color + ";'&gt;" + color + "&lt;/span&gt;.");
});

&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="data" >
				<parameters>
          <parameter name="key" type="String" usage="required">
            <description>A string naming the piece of data to set.</description>
          </parameter>
          <parameter name="value" type="Object" usage="required">
            <description>The new data value; it can be any Javascript type including Array or Object.</description>
          </parameter>
          <parameter name="obj" type="Object" usage="required">
            <description>An object of key-value pairs of data to update.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <description>Store arbitrary data associated with the matched elements.</description>
        <examples>
          <example>
			&lt;p&gt;Store then retrieve a value from the div element.&lt;/p&gt;
		
		&lt;p&gt;
$("div").data("test", { first: 16, last: "pizza!" });
$("span:first").text($("div").data("test").first);
$("span:last").text($("div").data("test").last);
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="dblclick" >
				<parameters>
          <parameter name="eventData" type="Object" usage="optional">
            <description>A map of data that will be passed to the event handler.</description>
          </parameter>
          <parameter name="handler" type="Function(jQuery.Event)" usage="required">
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Bind an event handler to the "dblclick" JavaScript event, or trigger that event on an element.</description>
        <examples>
          <example>
			&lt;p&gt;To bind a "Hello World!" alert box the dblclick event on every paragraph on the page:&lt;/p&gt;
		
		&lt;p&gt;$("p").dblclick( function () { alert("Hello World!"); });&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Double click to toggle background color.&lt;/p&gt;
		
		&lt;p&gt;
    var divdbl = $("div:first");
    divdbl.dblclick(function () { 
      divdbl.toggleClass('dbl'); 
    });

&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="delay" >
				<parameters>
          <parameter name="duration" type="Number" usage="required">
            <description>An integer indicating the number of milliseconds to delay execution of the next item in the queue.</description>
          </parameter>
          <parameter name="queueName" type="String" usage="optional">
            <description>A string containing the name of the queue. Defaults to </description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Set a timer to delay execution of subsequent items in the queue.</description>
        <examples>
          <example>
			&lt;p&gt;Animate the hiding and showing of two divs, delaying the first before showing it.&lt;/p&gt;
		
		&lt;p&gt;
    $("button").click(function() {
      $("div.first").slideUp(300).delay(800).fadeIn(400);
      $("div.second").slideUp(300).fadeIn(400);
    });
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="delegate" >
				<parameters>
          <parameter name="selector" type="String|SelectorString" usage="optional">
            <description>A selector which will be used to filter the event results.</description>
          </parameter>
          <parameter name="eventType" type="String|EventString" usage="optional">
            <description>A string containing a JavaScript event type, such as "click" or "keydown"</description>
          </parameter>
          <parameter name="handler" type="Function" usage="optional">
            <description>A function to execute at the time the event is triggered.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements.</description>
        <examples>
          <example>
			&lt;p&gt;Click a paragraph to add another. Note that .delegate() binds the click event to all paragraphs - even new ones.&lt;/p&gt;
		
		&lt;p&gt;
    $("body").delegate("p", "click", function(){
      $(this).after("&lt;p&gt;Another paragraph!&lt;/p&gt;");
    });
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;To display each paragraph's text in an alert box whenever it is clicked:&lt;/p&gt;
		
		&lt;p&gt;$("body").delegate("p", "click", function(){
  alert( $(this).text() );
});&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;To cancel a default action and prevent it from bubbling up, return false:&lt;/p&gt;
		
		&lt;p&gt;$("body").delegate("a", "click", function() { return false; })&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;To cancel only the default action by using the preventDefault method.&lt;/p&gt;
		
		&lt;p&gt;$("body").delegate("a", "click", function(event){
  event.preventDefault();
});&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Can bind custom events too.&lt;/p&gt;
		
		&lt;p&gt;

    $("body").delegate("p", "myCustomEvent", function(e, myName, myValue){
      $(this).text("Hi there!");
      $("span").stop().css("opacity", 1)
               .text("myName = " + myName)
               .fadeIn(30).fadeOut(1000);
    });
    $("button").click(function () {
      $("p").trigger("myCustomEvent");
    });

&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="dequeue" >
				<parameters>
          <parameter name="queueName" type="String" usage="optional">
            <description>A string containing the name of the queue. Defaults to </description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Execute the next function on the queue for the matched elements.</description>
        <examples>
          <example>
			&lt;p&gt;Use dequeue to end a custom queue function which allows the queue to keep going.&lt;/p&gt;
		
		&lt;p&gt;
$("button").click(function () {
  $("div").animate({left:'+=200px'}, 2000);
  $("div").animate({top:'0px'}, 600);
  $("div").queue(function () {
    $(this).toggleClass("red");
    $(this).dequeue();
  });
  $("div").animate({left:'10px', top:'30px'}, 700);
});
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="detach" >
				<parameters>
          <parameter name="selector" type="Selector|SelectorString" usage="optional">
            <description>A selector expression that filters the set of matched elements to be removed.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Remove the set of matched elements from the DOM.</description>
        <examples>
          <example>
			&lt;p&gt;Detach all paragraphs from the DOM&lt;/p&gt;
		
		&lt;p&gt;
    $("p").click(function(){
      $(this).toggleClass("off");
    });
    var p;
    $("button").click(function(){
      if ( p ) {
        p.appendTo("body");
        p = null;
      } else {
        p = $("p").detach();
      }
    });&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="each" >
				<parameters>
          <parameter name="function" type="Function(Number, Element)" usage="required">
            <description>A function to execute for each matched element.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Iterate over a jQuery object, executing a function for each matched element. </description>
        <examples>
          <example>
			&lt;p&gt;Iterates over three divs and sets their color property.&lt;/p&gt;
		
		&lt;p&gt;
    $(document.body).click(function () {
      $("div").each(function (i) {
        if (this.style.color != "blue") {
          this.style.color = "blue";
        } else {
          this.style.color = "";
        }
      });
    });&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;If you want to have the jQuery object instead of the regular DOM element, use the $(this) function, for example:&lt;/p&gt;
		
		&lt;p&gt;
    $("span").click(function () {
      $("li").each(function(){
        $(this).toggleClass("example");
      });
    });

&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;You can use 'return' to break out of each() loops early.&lt;/p&gt;
		
		&lt;p&gt;
    $("button").click(function () {
      $("div").each(function (index, domEle) {
        // domEle == this
        $(domEle).css("backgroundColor", "yellow"); 
        if ($(this).is("#stop")) {
          $("span").text("Stopped at div index #" + index);
          return false;
        }
      });
    });

&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="empty" >
				<return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Remove all child nodes of the set of matched elements from the DOM.</description>
        <examples>
          <example>
			&lt;p&gt;Removes all child nodes (including text nodes) from all paragraphs&lt;/p&gt;
		
		&lt;p&gt;
  $("button").click(function () {
    $("p").empty();
  });
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="end" >
				 <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>End the most recent filtering operation in the current chain and return the set of matched elements to its previous state.</description>
        <examples>
          <example>
			&lt;p&gt;Selects all paragraphs, finds span elements inside these, and reverts the selection back to the paragraphs.&lt;/p&gt;
		
		&lt;p&gt;

    jQuery.fn.showTags = function (n) {
      var tags = this.map(function () { 
                              return this.tagName; 
                            })
                        .get().join(", ");
      $("b:eq(" + n + ")").text(tags);
      return this;
    };

    $("p").showTags(0)
          .find("span")
          .showTags(1)
          .css("background", "yellow")
          .end()
          .showTags(2)
          .css("font-style", "italic");

&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Selects all paragraphs, finds span elements inside these, and reverts the selection back to the paragraphs.&lt;/p&gt;
		
		&lt;p&gt;$("p").find("span").end().css("border", "2px red solid");&lt;/p&gt;
	</example>
        </examples>
			</method>
				<method name="eq" scope="instance">
        <parameters>
          <parameter name="index" type="Number" usage="required">
            <description>An integer indicating the position of the element, counting backwards  from the last element in the set. </description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Reduce the set of matched elements to the one at the specified index.</description>
        <examples>
          <example>
			&lt;p&gt;Turn the div with index 2 blue by adding an appropriate class.&lt;/p&gt;
		
		&lt;p&gt;

    $("body").find("div").eq(2).addClass("blue");
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="fadeIn" >
				 <parameters>
          <parameter name="duration" type="String|Number" usage="optional">
            <description>A string or number determining how long the animation will run.</description>
          </parameter>
          <parameter name="easing" type="String" usage="optional">
            <description>A string indicating which easing function to use for the transition.</description>
          </parameter>
          <parameter name="callback" type="Function" usage="optional">
            <description>A function to call once the animation is complete.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Display the matched elements by fading them to opaque.</description>
        <examples>
          <example>
			&lt;p&gt;Animates hidden divs to fade in one by one, completing each animation within 600 milliseconds.&lt;/p&gt;
		
		&lt;p&gt;
      $(document.body).click(function () {
        $("div:hidden:first").fadeIn("slow");
      });
    &lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Fades a red block in over the text. Once the animation is done, it quickly fades in more text on top.&lt;/p&gt;
		
		&lt;p&gt;
        $("a").click(function () {
          $("div").fadeIn(3000, function () {
            $("span").fadeIn(100);
          });
          return false;
        }); 

      &lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="fadeOut" >
				<parameters>
          <parameter name="duration" type="String|Number" usage="optional">
            <description>A string or number determining how long the animation will run.</description>
          </parameter>
          <parameter name="easing" type="String" usage="optional">
            <description>A string indicating which easing function to use for the transition.</description>
          </parameter>
          <parameter name="callback" type="Function" usage="optional">
            <description>A function to call once the animation is complete.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Hide the matched elements by fading them to transparent.</description>
        <examples>
          <example>
			&lt;p&gt;Animates all paragraphs to fade out, completing the animation within 600 milliseconds.&lt;/p&gt;
		
		&lt;p&gt;
  $("p").click(function () {
  $("p").fadeOut("slow");
  });
  &lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Fades out spans in one section that you click on.&lt;/p&gt;
		
		&lt;p&gt;

  $("span").click(function () {
  $(this).fadeOut(1000, function () {
  $("div").text("'" + $(this).text() + "' has faded!");
  $(this).remove();
  });
  });
  $("span").hover(function () {
  $(this).addClass("hilite");
  }, function () {
  $(this).removeClass("hilite");
  });

  &lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Fades out two divs, one with a "linear" easing and one with the default, "swing," easing.&lt;/p&gt;
		
		&lt;p&gt;
$("#btn1").click(function() {
  function complete() {
    $("&lt;div/&gt;").text(this.id).appendTo("#log");
  }
  
  $("#box1").fadeOut(1600, "linear", complete);
  $("#box2").fadeOut(1600, complete);
});

$("#btn2").click(function() {
  $("div").show();
  $("#log").empty();
});

&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="fadeTo" >
				<parameters>
          <parameter name="duration" type="String|Number" usage="required">
            <description>A string or number determining how long the animation will run.</description>
          </parameter>
          <parameter name="opacity" type="Number" usage="required">
            <description>A number between 0 and 1 denoting the target opacity.</description>
          </parameter>
          <parameter name="easing" type="String" usage="optional">
            <description>A string indicating which easing function to use for the transition.</description>
          </parameter>
          <parameter name="callback" type="Function" usage="optional">
            <description>A function to call once the animation is complete.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Adjust the opacity of the matched elements.</description>
        <examples>
          <example>
			&lt;p&gt;Animates first paragraph to fade to an opacity of 0.33 (33%, about one third visible), completing the animation within 600 milliseconds.&lt;/p&gt;
		
		&lt;p&gt;
$("p:first").click(function () {
$(this).fadeTo("slow", 0.33);
});
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Fade div to a random opacity on each click, completing the animation within 200 milliseconds.&lt;/p&gt;
		
		&lt;p&gt;
$("div").click(function () {
$(this).fadeTo("fast", Math.random());
});
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Find the right answer!  The fade will take 250 milliseconds and change various styles when it completes.&lt;/p&gt;
		
		&lt;p&gt;
var getPos = function (n) {
return (Math.floor(n) * 90) + "px";
};
$("p").each(function (n) {
var r = Math.floor(Math.random() * 3);
var tmp = $(this).text();
$(this).text($("p:eq(" + r + ")").text());
$("p:eq(" + r + ")").text(tmp);
$(this).css("left", getPos(n));
});
$("div").each(function (n) {
      $(this).css("left", getPos(n));
    })
.css("cursor", "pointer")
.click(function () {
      $(this).fadeTo(250, 0.25, function () {
            $(this).css("cursor", "")
                   .prev().css({"font-weight": "bolder",
                                "font-style": "italic"});
          });
    });

&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="fadeToggle" >
				 <parameters>
          <parameter name="duration" type="String|Number" usage="optional">
            <description>A string or number determining how long the animation will run.</description>
          </parameter>
          <parameter name="easing" type="String" usage="optional">
            <description>A string indicating which easing function to use for the transition.</description>
          </parameter>
          <parameter name="callback" type="Function" usage="optional">
            <description>A function to call once the animation is complete.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Display or hide the matched elements by animating their opacity.</description>
        <examples>
          <example>
			&lt;p&gt;Fades first paragraph in or out, completing the animation within 600 milliseconds and using a linear easing. Fades last paragraph in or out for 200 milliseconds, inserting a "finished" message upon completion. &lt;/p&gt;
		
		&lt;p&gt;
$("button:first").click(function() {
  $("p:first").fadeToggle("slow", "linear");
});
$("button:last").click(function () {
  $("p:last").fadeToggle("fast", function () {
    $("#log").append("&lt;div&gt;finished&lt;/div&gt;");
  });
});
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="filter" >
				<parameters>
          <parameter name="selector" type="Selector|SelectorString|Element|Function|jQuery.fn" usage="required">
            <description>A string containing a selector expression to match the current set of elements against.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Reduce the set of matched elements to those that match the selector or pass the function's test. </description>
        <examples>
          <example>
			&lt;p&gt;Change the color of all divs; then add a border to those with a "middle" class.&lt;/p&gt;
		
		&lt;p&gt;

    $("div").css("background", "#c8ebcc")
            .filter(".middle")
            .css("border-color", "red");
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Change the color of all divs; then add a border to the second one (index == 1) and the div with an id of "fourth."&lt;/p&gt;
		
		&lt;p&gt;
    $("div").css("background", "#b4b0da")
            .filter(function (index) {
                  return index == 1 || $(this).attr("id") == "fourth";
                })
            .css("border", "3px double red");

&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Select all divs and filter the selection with a DOM element, keeping only the one with an id of "unique".&lt;/p&gt;
		
		&lt;p&gt;$("div").filter( document.getElementById("unique") )&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Select all divs and filter the selection with a jQuery object, keeping only the one with an id of "unique".&lt;/p&gt;
		
		&lt;p&gt;
$("div").filter( $("#unique") )&lt;/p&gt;
	</example>
        </examples>
      
			</method>
			<method name="find" >
				<parameters>
          <parameter name="selector" type="Selector|SelectorString" usage="required">
            <description>A string containing a selector expression to match elements against.</description>
          </parameter>
          <parameter name="jQuery object" type="Object" usage="required">
            <description>A jQuery object to match elements against.</description>
          </parameter>
          <parameter name="element" type="Element" usage="required">
            <description>An element to match elements against.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.</description>
        <examples>
          <example>
			&lt;p&gt;Starts with all paragraphs and searches for descendant span elements, same as $("p span")&lt;/p&gt;
		
		&lt;p&gt;
  $("p").find("span").css('color','red');
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;A selection using a jQuery collection of all span tags. Only spans within p tags are changed to red while others are left blue.&lt;/p&gt;
		
		&lt;p&gt;
  var $spans = $('span');
  $("p").find( $spans ).css('color','red');
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Add spans around each word then add a hover and italicize words with the letter t.&lt;/p&gt;
		
		&lt;p&gt;
  var newText = $("p").text().split(" ").join("&lt;/span&gt; &lt;span&gt;");
  newText = "&lt;span&gt;" + newText + "&lt;/span&gt;";

  $("p").html( newText )
    .find('span')
    .hover(function() { 
      $(this).addClass("hilite"); 
    },
      function() { $(this).removeClass("hilite"); 
    })
  .end()
    .find(":contains('t')")
    .css({"font-style":"italic", "font-weight":"bolder"});

&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="finish" >
				<return-types>
					<return-type type="jQuery.fn"/>
				</return-types>
				<parameters>
					<parameter name="queue" type="String" usage="optional"/>
				</parameters>
			</method>
			<method name="first" >
				<return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Reduce the set of matched elements to the first in the set.</description>
        <examples>
          <example>
			&lt;p&gt;Highlight the first span in a paragraph.&lt;/p&gt;
		
		&lt;p&gt;$("p span").first().addClass('highlight');&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="focusin" >
				<parameters>
          <parameter name="handler" type="Function" usage="required">
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
          <parameter name="eventData" type="Object" usage="optional">
            <description>A map of data that will be passed to the event handler.</description>
          </parameter>
          <parameter name="handler" type="Function" usage="required">
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Bind an event handler to the "focusin" JavaScript event.</description>
        <examples>
          <example>
			&lt;p&gt;Watch for a focus to occur within the paragraphs on the page.&lt;/p&gt;
		
		&lt;p&gt;
    $("p").focusin(function() {
         $(this).find("span").css('display','inline').fadeOut(1000);
    });
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="focusout" >
				<parameters>
          <parameter name="handler" type="Function" usage="required">
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
          <parameter name="eventData" type="Object" usage="optional">
            <description>A map of data that will be passed to the event handler.</description>
          </parameter>
          <parameter name="handler" type="Function(jQuery.Event)" usage="required">
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Bind an event handler to the "focusout" JavaScript event.</description>
        <examples>
          <example>
			&lt;p&gt;Watch for a loss of focus to occur inside paragraphs and note the difference between the focusout count and the blur count.&lt;/p&gt;
		
		&lt;p&gt;
var fo = 0, b = 0;
$("p").focusout(function() {
  fo++;
  $("#fo")
    .text("focusout fired: " + fo + "x");
}).blur(function() {
  b++;
  $("#b")
    .text("blur fired: " + b + "x");
  
});
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="get" >
				<parameters>
          <parameter name="index" type="Number" usage="optional">
            <description>A zero-based integer indicating which element to retrieve.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Element"/>
          <return-type type="Array"/>
        </return-types>
        <description>Retrieve the DOM elements matched by the jQuery object.</description>
        <examples>
          <example>
			&lt;p&gt;Selects all divs in the document and returns the DOM Elements as an Array, then uses the built-in reverse-method to reverse that array.&lt;/p&gt;
		
		&lt;p&gt;

    function disp(divs) {
      var a = [];
      for (var i = 0; i &lt; divs.length; i++) {
        a.push(divs[i].innerHTML);
      }
      $("span").text(a.join(" "));
    }
    
    disp( $("div").get().reverse() );
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Gives the tag name of the element clicked on.&lt;/p&gt;
		
		&lt;p&gt;

    $("*", document.body).click(function (e) {
      e.stopPropagation();
      var domEl = $(this).get(0);
      $("span:first").text("Clicked on - " + domEl.tagName);
    });
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="has" >
				<parameters>
          <parameter name="selector" type="String|SelectorString" usage="required">
            <description>A string containing a selector expression to match elements against.</description>
          </parameter>
          <parameter name="contained" type="Element" usage="required">
            <description>A DOM element to match elements against.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.</description>
        <examples>
          <example>
			&lt;p&gt;Check if an element is inside another.&lt;/p&gt;
		
		&lt;p&gt;
  $("ul").append("&lt;li&gt;" + ($("ul").has("li").length ? "Yes" : "No") + "&lt;/li&gt;");
  $("ul").has("li").addClass("full");
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="hasClass" >
				<parameters>
          <parameter name="className" type="String|ClassString" usage="required">
            <description>The class name to search for.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Determine whether any of the matched elements are assigned the given class.</description>
        <examples>
          <example>
			&lt;p&gt;Looks for the paragraph that contains 'selected' as a class.&lt;/p&gt;
		
		&lt;p&gt;
$("div#result1").append($("p:first").hasClass("selected").toString());
$("div#result2").append($("p:last").hasClass("selected").toString());
$("div#result3").append($("p").hasClass("selected").toString());
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="height" >
				<return-types>
          <return-type type="Number"/>
        </return-types>
        <description>Get the current computed height for the first element in the set of matched elements.</description>
        <examples>
          <example>
			&lt;p&gt;Show various heights.  Note the values are from the iframe so might be smaller than you expected.  The yellow highlight shows the iframe body.&lt;/p&gt;
		
		&lt;p&gt;
    function showHeight(ele, h) {
      $("div").text("The height for the " + ele + 
                    " is " + h + "px.");
    }
    $("#getp").click(function () { 
      showHeight("paragraph", $("p").height()); 
    });
    $("#getd").click(function () { 
      showHeight("document", $(document).height()); 
    });
    $("#getw").click(function () { 
      showHeight("window", $(window).height()); 
    });

&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="hide" >
				<parameters>
          <parameter name="duration" type="String|Number" usage="optional">
            <description>A string or number determining how long the animation will run.</description>
          </parameter>
          <parameter name="duration" type="String|Number" usage="optional">
            <description>A string or number determining how long the animation will run.</description>
          </parameter>
          <parameter name="easing" type="String" usage="optional">
            <description>A string indicating which easing function to use for the transition.</description>
          </parameter>
          <parameter name="callback" type="Function" usage="optional">
            <description>A function to call once the animation is complete.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Hide the matched elements.</description>
        <examples>
          <example>
			&lt;p&gt;Hides all paragraphs then the link on click.&lt;/p&gt;
		
		&lt;p&gt;

    $("p").hide();
    $("a").click(function ( event ) {
      event.preventDefault();
      $(this).hide();
    });
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Animates all shown paragraphs to hide slowly, completing the animation within 600 milliseconds.&lt;/p&gt;
		
		&lt;p&gt;
    $("button").click(function () {
      $("p").hide("slow");
    });    
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Animates all spans (words in this case) to hide fastly, completing each animation within 200 milliseconds. Once each animation is done, it starts the next one.&lt;/p&gt;
		
		&lt;p&gt;
    $("#hidr").click(function () {
      $("span:last-child").hide("fast", function () {
        // use callee so don't have to name the function
        $(this).prev().hide("fast", arguments.callee); 
      });
    });
    $("#showr").click(function () {
      $("span").show(2000);
    });

&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Hides the divs when clicked over 2 seconds, then removes the div element when its hidden.  Try clicking on more than one box at a time.&lt;/p&gt;
		
		&lt;p&gt;
    for (var i = 0; i &lt; 5; i++) {
      $("&lt;div&gt;").appendTo(document.body);
    }
    $("div").click(function () {
      $(this).hide(2000, function () {
        $(this).remove();
      });
    });
&lt;/p&gt;
	</example>
        </examples>
      
			</method>
			<method name="hover" >
				<parameters>
          <parameter name="handlerIn" type="Function" usage="required">
            <description>A function to execute when the mouse pointer enters the element.</description>
          </parameter>
          <parameter name="handlerOut" type="Function" usage="required">
            <description>A function to execute when the mouse pointer leaves the element.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Bind two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements.</description>
        <examples>
          <example>
			&lt;p&gt;To add a special style to list items that are being hovered over, try:&lt;/p&gt;
		
		&lt;p&gt;
$("li").hover(
  function () {
    $(this).append($("&lt;span&gt; ***&lt;/span&gt;"));
  }, 
  function () {
    $(this).find("span:last").remove();
  }
);



//li with fade class
$("li.fade").hover(function(){$(this).fadeOut(100);$(this).fadeIn(500);});

&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;To add a special style to table cells that are being hovered over, try:&lt;/p&gt;
		
		&lt;p&gt;$("td").hover(
  function () {
    $(this).addClass("hover");
  },
  function () {
    $(this).removeClass("hover");
  }
);&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;To unbind the above example use:&lt;/p&gt;
		
		&lt;p&gt;$("td").unbind('mouseenter mouseleave');&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="html" >
				<parameters>
          <parameter name="htmlString" type="String|HTMLString" usage="required">
            <description>A string of HTML to set as the content of each matched element.</description>
          </parameter>
          <parameter name="function" type="Function" usage="required">
            <description>A function returning the HTML content to set. Receives the index position of the element in the set and the old HTML value as arguments. jQuery empties the element before calling the function; use the oldhtml argument to reference the previous content. Within the function, </description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <description>Set the HTML contents of each element in the set of matched elements.</description>
        <examples>
          <example>
			&lt;p&gt;Add some html to each div.&lt;/p&gt;
		
		&lt;p&gt;$("div").html("&lt;span class='red'&gt;Hello &lt;b&gt;Again&lt;/b&gt;&lt;/span&gt;");&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Add some html to each div then immediately do further manipulations to the inserted html.&lt;/p&gt;
		
		&lt;p&gt;

    $("div").html("&lt;b&gt;Wow!&lt;/b&gt; Such excitement...");
    $("div b").append(document.createTextNode("!!!"))
              .css("color", "red");

&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="index" >
				<parameters>
          <parameter name="selector" type="String|SelectorString|Element" usage="optional">
            <description>A selector representing a jQuery collection in which to look for an element.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>Search for a given element from among the matched elements.</description>
        <examples>
          <example>
			&lt;p&gt;On click, returns the index (based zero) of that div in the page.&lt;/p&gt;
		
		&lt;p&gt;
$("div").click(function () {
  // this is the dom element clicked
  var index = $("div").index(this);
  $("span").text("That was div index #" + index);
});
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Returns the index for the element with ID bar.&lt;/p&gt;
		
		&lt;p&gt;var listItem = $('#bar');
    $('div').html( 'Index: ' + $('li').index(listItem) );&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Returns the index for the first item in the jQuery collection.&lt;/p&gt;
		
		&lt;p&gt;var listItems = $('li:gt(0)');
$('div').html( 'Index: ' + $('li').index(listItems) );
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Returns the index for the element with ID bar in relation to all &lt;li&gt; elements.&lt;/p&gt;
		
		&lt;p&gt;$('div').html('Index: ' +  $('#bar').index('li') );&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Returns the index for the element with ID bar in relation to its siblings.&lt;/p&gt;
		
		&lt;p&gt;var barIndex = $('#bar').index();
$('div').html( 'Index: ' +  barIndex );&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Returns -1, as there is no element with ID foobar.&lt;/p&gt;
		
		&lt;p&gt;var foobar = $("li").index( $('#foobar') );
$('div').html('Index: ' + foobar);&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="innerHeight" >
				<return-types>
          <return-type type="Number"/>
        </return-types>
        <description>Get the current computed height for the first element in the set of matched elements, including padding but not border.</description>
        <examples>
          <example>
			&lt;p&gt;Get the innerHeight of a paragraph.&lt;/p&gt;
		
		&lt;p&gt;var p = $("p:first");
$("p:last").text( "innerHeight:" + p.innerHeight() );&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="innerWidth" >
				<return-types>
          <return-type type="Number"/>
        </return-types>
        <description>Get the current computed width for the first element in the set of matched elements, including padding but not border.</description>
        <examples>
          <example>
			&lt;p&gt;Get the innerWidth of a paragraph.&lt;/p&gt;
		
		&lt;p&gt;var p = $("p:first");
$("p:last").text( "innerWidth:" + p.innerWidth() );&lt;/p&gt;
	</example>
        </examples>
      </method>
      <method name="innerHeight" scope="instance">
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>Get the current computed height for the first element in the set of matched elements, including padding but not border.</description>
        <examples>
          <example>
			&lt;p&gt;Get the innerHeight of a paragraph.&lt;/p&gt;
		
		&lt;p&gt;var p = $("p:first");
$("p:last").text( "innerHeight:" + p.innerHeight() );&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="insertAfter" >
				<parameters>
          <parameter name="target" type="Selector| Element| jQuery.fn|SelectorString" usage="required">
            <description>A selector, element, HTML string, or jQuery object; the matched set of elements will be inserted after the element(s) specified by this parameter.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Insert every element in the set of matched elements after the target.</description>
        <examples>
          <example>
			&lt;p&gt;Inserts all paragraphs after an element with id of "foo". Same as $("#foo").after("p")&lt;/p&gt;
		
		&lt;p&gt;$("p").insertAfter("#foo"); // check after() examples&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="insertBefore" >
				<parameters>
          <parameter name="target" type="Selector| Element| jQuery.fn|SelectorString" usage="required">
            <description>A selector, element, HTML string, or jQuery object; the matched set of elements will be inserted before the element(s) specified by this parameter.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Insert every element in the set of matched elements before the target.</description>
        <examples>
          <example>
			&lt;p&gt;Inserts all paragraphs before an element with id of "foo". Same as $("#foo").before("p")&lt;/p&gt;
		
		&lt;p&gt;$("p").insertBefore("#foo"); // check before() examples&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="is" >
				 <parameters>
          <parameter name="selector" type="Selector|SelectorString|Function|Element|jQuery.fn" usage="required">
            <description>A string containing a selector expression to match elements against.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Boolean"/>
        </return-types>
        <description>Check the current matched set of elements against a selector, element, or jQuery object and return </description>
        <examples>
          <example>
			&lt;p&gt;Shows a few ways is() can be used inside an event handler.&lt;/p&gt;
		
		&lt;p&gt;
  $("div").one('click', function () {
    if ($(this).is(":first-child")) {
      $("p").text("It's the first div.");
    } else if ($(this).is(".blue,.red")) {
      $("p").text("It's a blue or red div.");
    } else if ($(this).is(":contains('Peter')")) {
      $("p").text("It's Peter!");
    } else {
      $("p").html("It's nothing &lt;em&gt;special&lt;/em&gt;.");
    }
    $("p").hide().slideDown("slow");
    $(this).css({"border-style": "inset", cursor:"default"});
  });
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Returns true, because the parent of the input is a form element.&lt;/p&gt;
		
		&lt;p&gt;
  var isFormParent = $("input[type='checkbox']").parent().is("form");
  $("div").text("isFormParent = " + isFormParent);
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Returns false, because the parent of the input is a p element.&lt;/p&gt;
		
		&lt;p&gt;
  var isFormParent = $("input[type='checkbox']").parent().is("form");
  $("div").text("isFormParent = " + isFormParent);
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Checks against an existing collection of alternating list elements. Blue, alternating list elements slide up while others turn red.&lt;/p&gt;
		
		&lt;p&gt;
  var $alt = $("#browsers li:nth-child(2n)").css("background", "#00FFFF");
  $('li').click(function() {
    var $li = $(this);
    if ( $li.is( $alt ) ) {
      $li.slideUp();
    } else {
      $li.css("background", "red");
    }
  });
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;An alternate way to achieve the above example using an element rather than a jQuery object. Checks against an existing collection of alternating list elements. Blue, alternating list elements slide up while others turn red.&lt;/p&gt;
		
		&lt;p&gt;
  var $alt = $("#browsers li:nth-child(2n)").css("background", "#00FFFF");
  $('li').click(function() {
    if ( $alt.is( this ) ) {
      $(this).slideUp();
    } else {
      $(this).css("background", "red");
    }
  });
&lt;/p&gt;
	</example>
        </examples>
      
			</method>
			<method name="keydown" >
				<parameters>
          <parameter name="eventData" type="Object" usage="optional">
            <description>A map of data that will be passed to the event handler.</description>
          </parameter>
          <parameter name="handler" type="Function(jQuery.Event)" usage="required">
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Bind an event handler to the "keydown" JavaScript event, or trigger that event on an element.</description>
        <examples>
          <example>
			&lt;p&gt;Show the event object for the keydown handler when a key is pressed in the input.&lt;/p&gt;
		
		&lt;p&gt;
var xTriggered = 0;
$('#target').keydown(function(event) {
  if (event.keyCode == '13') {
     event.preventDefault();
   }
   xTriggered++;
   var msg = 'Handler for .keydown() called ' + xTriggered + ' time(s).';
  $.print(msg, 'html');
  $.print(event);
});

$('#other').click(function() {
  $('#target').keydown();
});&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="keypress" >
				<parameters>
          <parameter name="eventData" type="Object" usage="optional">
            <description>A map of data that will be passed to the event handler.</description>
          </parameter>
          <parameter name="handler" type="Function(jQuery.Event)" usage="optional">
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Bind an event handler to the "keypress" JavaScript event, or trigger that event on an element.</description>
        <examples>
          <example>
			&lt;p&gt;Show the event object when a key is pressed in the input. Note: This demo relies on a simple $.print() plugin (http://api.jquery.com/scripts/events.js) for the event object's output.&lt;/p&gt;
		
		&lt;p&gt;
var xTriggered = 0;
$("#target").keypress(function(event) {
  if ( event.which == 13 ) {
     event.preventDefault();
   }
   xTriggered++;
   var msg = "Handler for .keypress() called " + xTriggered + " time(s).";
  $.print( msg, "html" );
  $.print( event );
});

$("#other").click(function() {
  $("#target").keypress();
});&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="keyup" >
				<parameters>
          <parameter name="eventData" type="Object" usage="optional">
            <description>A map of data that will be passed to the event handler.</description>
          </parameter>
          <parameter name="handler" type="Function(jQuery.Event)" usage="required">
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Bind an event handler to the "keyup" JavaScript event, or trigger that event on an element.</description>
        <examples>
          <example>
			&lt;p&gt;Show the event object for the keyup handler when a key is released in the input.&lt;/p&gt;
		
		&lt;p&gt;
var xTriggered = 0;
$('#target').keyup(function(event) {
  if (event.keyCode == '13') {
     event.preventDefault();
   }
   xTriggered++;
   var msg = 'Handler for .keyup() called ' + xTriggered + ' time(s).';
  $.print(msg, 'html');
  $.print(event);
});

$('#other').click(function() {
  $('#target').keyup();
});&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="last" >
				<return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Reduce the set of matched elements to the final one in the set.</description>
        <examples>
          <example>
			&lt;p&gt;Highlight the last span in a paragraph.&lt;/p&gt;
		
		&lt;p&gt;$("p span").last().addClass('highlight');&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="load" >
				<parameters>
          <parameter name="url" type="String|URIString" usage="required">
            <description>A string containing the URL to which the request is sent.</description>
          </parameter>
          <parameter name="data" type="Map|String" usage="required">
            <description>A map or string that is sent to the server with the request.</description>
          </parameter>
          <parameter name="complete" type="Function" usage="optional">
            <description>A callback function that is executed when the request completes.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Load data from the server and place the returned HTML into the matched element.</description>
        <examples>
          <example>
			&lt;p&gt;Load the main page's footer navigation into an ordered list.&lt;/p&gt;
		
		&lt;p&gt;
  $("#new-nav").load("/ #jq-footerNavigation li");
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Display a notice if the Ajax request encounters an error.&lt;/p&gt;
		
		&lt;p&gt;
$("#success").load("/not-here.php", function(response, status, xhr) {
  if (status == "error") {
    var msg = "Sorry but there was an error: ";
    $("#error").html(msg + xhr.status + " " + xhr.statusText);
  }
});
  &lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Load the feeds.html file into the div with the ID of feeds.&lt;/p&gt;
		
		&lt;p&gt;$("#feeds").load("feeds.html");&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;pass arrays of data to the server.&lt;/p&gt;
		
		&lt;p&gt;$("#objectID").load("test.php", { 'choices[]': ["Jon", "Susan"] } );&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Same as above, but will POST the additional parameters to the server and a callback that is executed when the server is finished responding.&lt;/p&gt;
		
		&lt;p&gt;$("#feeds").load("feeds.php", {limit: 25}, function(){
alert("The last 25 entries in the feed have been loaded");
});&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="map" >
				<parameters>
          <parameter name="callback" type="Function(Number,Element)" usage="required">
            <description>A function object that will be invoked for each element in the current set.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Pass each element in the current matched set through a function, producing a new jQuery object containing the return values.</description>
        <examples>
          <example>
			&lt;p&gt;Build a list of all the values within a form.&lt;/p&gt;
		
		&lt;p&gt;
    $("p").append( $("input").map(function(){
      return $(this).val();
    }).get().join(", ") );

&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;A contrived example to show some functionality.&lt;/p&gt;
		
		&lt;p&gt;
var mappedItems = $("li").map(function (index) {
  var replacement = $("&lt;li&gt;").text($(this).text()).get(0);
  if (index == 0) {
    /* make the first item all caps */
    $(replacement).text($(replacement).text().toUpperCase());
  } else if (index == 1 || index == 3) {
    /* delete the second and fourth items */
    replacement = null;
  } else if (index == 2) {
    /* make two of the third item and add some text */
    replacement = [replacement,$("&lt;li&gt;").get(0)];
    $(replacement[0]).append("&lt;b&gt; - A&lt;/b&gt;");
    $(replacement[1]).append("Extra &lt;b&gt; - B&lt;/b&gt;");
  }

  /* replacement will be a dom element, null, 
     or an array of dom elements */
  return replacement;
});
$("#results").append(mappedItems);

&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Equalize the heights of the divs.&lt;/p&gt;
		
		&lt;p&gt;
$.fn.equalizeHeights = function() {
  var maxHeight = this.map(function(i,e) {
    return $(e).height();
  }).get();
  
  return this.height( Math.max.apply(this, maxHeight) );
};

$('input').click(function(){
  $('div').equalizeHeights();
});

&lt;/p&gt;
	</example>
        </examples>
        
			</method>
			<method name="mousedown" >
				<parameters>
          <parameter name="eventData" type="Object" usage="optional">
            <description>A map of data that will be passed to the event handler.</description>
          </parameter>
          <parameter name="handler" type="Function(jQuery.Event)" usage="required">
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Bind an event handler to the "mousedown" JavaScript event, or trigger that event on an element.</description>
        <examples>
          <example>
			&lt;p&gt;Show texts when mouseup and mousedown event triggering.&lt;/p&gt;
		
		&lt;p&gt;
    $("p").mouseup(function(){
      $(this).append('&lt;span style="color:#F00;"&gt;Mouse up.&lt;/span&gt;');
    }).mousedown(function(){
      $(this).append('&lt;span style="color:#00F;"&gt;Mouse down.&lt;/span&gt;');
    });

&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="mouseenter" >
				<parameters>
          <parameter name="eventData" type="Object" usage="optional">
            <description>A map of data that will be passed to the event handler.</description>
          </parameter>
          <parameter name="handler" type="Function(jQuery.Event)" usage="required">
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element.</description>
        <examples>
          <example>
			&lt;p&gt;Show texts when mouseenter and mouseout event triggering.
mouseover fires when the pointer moves into the child element as well, while mouseenter fires only when the pointer moves into the bound element.&lt;/p&gt;
		
		&lt;p&gt;
    var i = 0;
    $("div.overout").mouseover(function(){
      $("p:first",this).text("mouse over");
      $("p:last",this).text(++i);
    }).mouseout(function(){
      $("p:first",this).text("mouse out");
    });

    var n = 0;
    $("div.enterleave").mouseenter(function(){
      $("p:first",this).text("mouse enter");
      $("p:last",this).text(++n);
    }).mouseleave(function(){
      $("p:first",this).text("mouse leave");
    });

&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="mouseleave" >
				<parameters>
          <parameter name="eventData" type="Object" usage="optional">
            <description>A map of data that will be passed to the event handler.</description>
          </parameter>
          <parameter name="handler" type="Function(jQuery.Event)" usage="required">
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element.</description>
        <examples>
          <example>
			&lt;p&gt;Show number of times mouseout and mouseleave events are triggered.
mouseout fires when the pointer moves out of child element as well, while mouseleave fires only when the pointer moves out of the bound element.&lt;/p&gt;
		
		&lt;p&gt;
    var i = 0;
    $("div.overout").mouseover(function(){
      $("p:first",this).text("mouse over");
    }).mouseout(function(){
      $("p:first",this).text("mouse out");
      $("p:last",this).text(++i);
    });

    var n = 0;
    $("div.enterleave").mouseenter(function(){
      $("p:first",this).text("mouse enter");
    }).mouseleave(function(){
      $("p:first",this).text("mouse leave");
      $("p:last",this).text(++n);
    });

&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="mousemove" >
				<parameters>
          <parameter name="eventData" type="Object" usage="optional">
            <description>A map of data that will be passed to the event handler.</description>
          </parameter>
          <parameter name="handler" type="Function(jQuery.Event)" usage="required">
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Bind an event handler to the "mousemove" JavaScript event, or trigger that event on an element.</description>
        <examples>
          <example>
			&lt;p&gt;Show the mouse coordinates when the mouse is moved over the yellow div.  Coordinates are relative to the window, which in this case is the iframe.&lt;/p&gt;
		
		&lt;p&gt;
    $("div").mousemove(function(e){
      var pageCoords = "( " + e.pageX + ", " + e.pageY + " )";
      var clientCoords = "( " + e.clientX + ", " + e.clientY + " )";
      $("span:first").text("( e.pageX, e.pageY ) - " + pageCoords);
      $("span:last").text("( e.clientX, e.clientY ) - " + clientCoords);
    });

&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="mouseout" >
				<parameters>
          <parameter name="eventData" type="Object" usage="optional">
            <description>A map of data that will be passed to the event handler.</description>
          </parameter>
          <parameter name="handler" type="Function(jQuery.Event)" usage="required">
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Bind an event handler to the "mouseout" JavaScript event, or trigger that event on an element.</description>
        <examples>
          <example>
			&lt;p&gt;Show the number of times mouseout and mouseleave events are triggered.
mouseout fires when the pointer moves out of the child element as well, while mouseleave fires only when the pointer moves out of the bound element.&lt;/p&gt;
		
		&lt;p&gt;
    var i = 0;
    $("div.overout").mouseout(function(){
      $("p:first",this).text("mouse out");
      $("p:last",this).text(++i);
    }).mouseover(function(){
      $("p:first",this).text("mouse over");
    });

    var n = 0;
    $("div.enterleave").bind("mouseenter",function(){
      $("p:first",this).text("mouse enter");
    }).bind("mouseleave",function(){
      $("p:first",this).text("mouse leave");
      $("p:last",this).text(++n);
    });

&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="mouseover" >
				<parameters>
          <parameter name="eventData" type="Object" usage="optional">
            <description>A map of data that will be passed to the event handler.</description>
          </parameter>
          <parameter name="handler" type="Function(jQuery.Event)" usage="required">
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Bind an event handler to the "mouseover" JavaScript event, or trigger that event on an element.</description>
        <examples>
          <example>
			&lt;p&gt;Show the number of times mouseover and mouseenter events are triggered.
mouseover fires when the pointer moves into the child element as well, while mouseenter fires only when the pointer moves into the bound element.&lt;/p&gt;
		
		&lt;p&gt;
  var i = 0;
  $("div.overout").mouseover(function() {
    i += 1;
    $(this).find("span").text( "mouse over x " + i );
  }).mouseout(function(){
    $(this).find("span").text("mouse out ");
  });

  var n = 0;
  $("div.enterleave").mouseenter(function() {
    n += 1;
    $(this).find("span").text( "mouse enter x " + n );
  }).mouseleave(function() {
    $(this).find("span").text("mouse leave");
  });

&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="mouseup" >
				<parameters>
          <parameter name="eventData" type="Object" usage="optional">
            <description>A map of data that will be passed to the event handler.</description>
          </parameter>
          <parameter name="handler" type="Function(jQuery.Event)" usage="required">
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Bind an event handler to the "mouseup" JavaScript event, or trigger that event on an element.</description>
        <examples>
          <example>
			&lt;p&gt;Show texts when mouseup and mousedown event triggering.&lt;/p&gt;
		
		&lt;p&gt;
    $("p").mouseup(function(){
      $(this).append('&lt;span style="color:#F00;"&gt;Mouse up.&lt;/span&gt;');
    }).mousedown(function(){
      $(this).append('&lt;span style="color:#00F;"&gt;Mouse down.&lt;/span&gt;');
    });

&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="next" >
				<parameters>
          <parameter name="selector" type="Selector|SelectorString" usage="optional">
            <description>A string containing a selector expression to match elements against.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector.</description>
        <examples>
          <example>
			&lt;p&gt;Find the very next sibling of each disabled button and change its text "this button is disabled".&lt;/p&gt;
		
		&lt;p&gt;$("button[disabled]").next().text("this button is disabled");&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Find the very next sibling of each paragraph. Keep only the ones with a class "selected".&lt;/p&gt;
		
		&lt;p&gt;$("p").next(".selected").css("background", "yellow");&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="nextAll" >
				<parameters>
          <parameter name="selector" type="String|SelectorString" usage="optional">
            <description>A string containing a selector expression to match elements against.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Get all following siblings of each element in the set of matched elements, optionally filtered by a selector.</description>
        <examples>
          <example>
			&lt;p&gt;Locate all the divs after the first and give them a class.&lt;/p&gt;
		
		&lt;p&gt;$("div:first").nextAll().addClass("after");&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Locate all the paragraphs after the second child in the body and give them a class.&lt;/p&gt;
		
		&lt;p&gt;
    $(":nth-child(1)").nextAll("p").addClass("after");
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="nextUntil" >
				<parameters>
          <parameter name="selector" type="String|SelectorString|Element|jQeury.fn" usage="optional">
            <description>A string containing a selector expression to indicate where to stop matching following sibling elements.</description>
          </parameter>
          <parameter name="filter" type="String|SelectorString" usage="optional">
            <description>A string containing a selector expression to match elements against.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed.</description>
        <examples>
          <example>
			&lt;p&gt;Find the siblings that follow &lt;dt id="term-2"&gt; up to the next &lt;dt&gt; and give them a red background color. Also, find &lt;dd&gt; siblings that follow &lt;dt id="term-1"&gt; up to &lt;dt id="term-3"&gt; and give them a green text color. &lt;/p&gt;
		
		&lt;p&gt;  
$("#term-2").nextUntil("dt")
  .css("background-color", "red");

var term3 = document.getElementById("term-3");
$("#term-1").nextUntil(term3, "dd")
  .css("color", "green");

&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="not" >
				<parameters>
          <parameter name="selector" type="Selector|SelectorString|Element|Function" usage="required">
            <description>A string containing a selector expression to match elements against.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery"/>
        </return-types>
        <description>Remove elements from the set of matched elements.</description>
        <examples>
          <example>
			&lt;p&gt;Adds a border to divs that are not green or blue.&lt;/p&gt;
		
		&lt;p&gt;
    $("div").not(".green, #blueone")
            .css("border-color", "red");

&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Removes the element with the ID "selected" from the set of all paragraphs.&lt;/p&gt;
		
		&lt;p&gt;$("p").not( $("#selected")[0] )&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Removes the element with the ID "selected" from the set of all paragraphs.&lt;/p&gt;
		
		&lt;p&gt;$("p").not("#selected")&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Removes all elements that match "div p.selected" from the total set of all paragraphs.&lt;/p&gt;
		
		&lt;p&gt;$("p").not($("div p.selected"))&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="off" >
				<parameters>
          <parameter name="eventType" type="String|EventString" usage="optional">
            <description>One or more space-separated event types and optional namespaces, or just namespaces, such as "click", "keydown.myPlugin", or ".myPlugin".</description>
          </parameter>
          <parameter name="selector" type="String|SelectorString" usage="optional">
            <description>The function that is to be no longer executed.</description>
          </parameter>
          <parameter name="handler" type="Function(jQuery.Event)|Object" usage="optional">
            <description>A string containing a JavaScript event type, such as </description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description> Remove an event handler</description>
			</method>
			<method name="offset" >
				<return-types>
          <return-type type="Offset"/>
        </return-types>
        <description>Get the current coordinates of the first element in the set of matched elements, relative to the document.</description>
        <examples>
          <example>
			&lt;p&gt;Access the offset of the second paragraph:&lt;/p&gt;
		
		&lt;p&gt;var p = $("p:last");
var offset = p.offset();
p.html( "left: " + offset.left + ", top: " + offset.top );&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Click to see the offset.&lt;/p&gt;
		
		&lt;p&gt;
$("*", document.body).click(function (e) {
  var offset = $(this).offset();
  e.stopPropagation();
  $("#result").text(this.tagName + " coords ( " + offset.left + ", " +
                                  offset.top + " )");
});

&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="offsetParent" >
				<return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Get the closest ancestor element that is positioned.</description>
        <examples>
          <example>
			&lt;p&gt;Find the offsetParent of item "A."&lt;/p&gt;
		
		&lt;p&gt;$('li.item-a').offsetParent().css('background-color', 'red');&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="on" >
				<parameters>
          <parameter name="eventType" type="String|EventString" usage="required">
            <description>One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".</description>
          </parameter>
          <parameter name="selector" type="String|SelectorString" usage="optional">
            <description>The function that is to be no longer executed.</description>
          </parameter>
          <parameter name="data" type="Object" usage="required">
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
          <parameter name="handler" type="Function(jQuery.Event)|Object" usage="optional">
            <description>A function to execute when the event is triggered. The value false is also allowed as a shorthand for a function that simply does return false.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Attach an event handler function for one or more events to the selected elements.</description>
			</method>
			<method name="one" >
				<parameters>
          <parameter name="eventType" type="String|EventString" usage="required">
            <description>A string containing one or more JavaScript event types, such as "click" or "submit," or custom event names.</description>
          </parameter>
          <parameter name="eventData" type="Object" usage="optional">
            <description>A map of data that will be passed to the event handler.</description>
          </parameter>
          <parameter name="handler" type="Function(jQuery.Event)" usage="required">
            <description>A function to execute at the time the event is triggered.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Attach a handler to an event for the elements. The handler is executed at most once per element.</description>
        <examples>
          <example>
			&lt;p&gt;Tie a one-time click to each div.&lt;/p&gt;
		
		&lt;p&gt;
var n = 0;
$("div").one("click", function() {
  var index = $("div").index(this);
  $(this).css({ 
    borderStyle:"inset",
    cursor:"auto"
  });
  $("p").text("Div at index #" + index + " clicked." +
      "  That's " + ++n + " total clicks.");
});

&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;To display the text of all paragraphs in an alert box the first time each of them is clicked:&lt;/p&gt;
		
		&lt;p&gt;$("p").one("click", function(){
alert( $(this).text() );
});&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="outerHeight" >
				<parameters>
          <parameter name="includeMargin" type="Boolean" usage="optional">
            <description>A Boolean indicating whether to include the element's margin in the calculation.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>Get the current computed height for the first element in the set of matched elements, including padding, border, and optionally margin.</description>
        <examples>
          <example>
			&lt;p&gt;Get the outerHeight of a paragraph.&lt;/p&gt;
		
		&lt;p&gt;var p = $("p:first");
$("p:last").text( "outerHeight:" + p.outerHeight() + " , outerHeight(true):" + p.outerHeight(true) );&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="outerWidth" >
				<parameters>
          <parameter name="includeMargin" type="Boolean" usage="optional">
            <description>A Boolean indicating whether to include the element's margin in the calculation.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>Get the current computed width for the first element in the set of matched elements, including padding and border.</description>
        <examples>
          <example>
			&lt;p&gt;Get the outerWidth of a paragraph.&lt;/p&gt;
		
		&lt;p&gt;var p = $("p:first");
$("p:last").text( "outerWidth:" + p.outerWidth()+ " , outerWidth(true):" + p.outerWidth(true) );

&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="parent" >
				<parameters>
          <parameter name="selector" type="Selector|SelectorString" usage="optional">
            <description>A string containing a selector expression to match elements against.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Get the parent of each element in the current set of matched elements, optionally filtered by a selector.</description>
        <examples>
          <example>
			&lt;p&gt;Shows the parent of each element as (parent &gt; child).  Check the View Source to see the raw html.&lt;/p&gt;
		
		&lt;p&gt;

    $("*", document.body).each(function () {
      var parentTag = $(this).parent().get(0).tagName;
      $(this).prepend(document.createTextNode(parentTag + " &gt; "));
    });
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Find the parent element of each paragraph with a class "selected".&lt;/p&gt;
		
		&lt;p&gt;$("p").parent(".selected").css("background", "yellow");&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="parents" >
				<parameters>
          <parameter name="selector" type="Selector|SelectorString" usage="optional">
            <description>A string containing a selector expression to match elements against.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector.</description>
        <examples>
          <example>
			&lt;p&gt;Find all parent elements of each b.&lt;/p&gt;
		
		&lt;p&gt;
var parentEls = $("b").parents()
            .map(function () { 
                  return this.tagName; 
                })
            .get().join(", ");
$("b").append("&lt;strong&gt;" + parentEls + "&lt;/strong&gt;");

&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Click to find all unique div parent elements of each span.&lt;/p&gt;
		
		&lt;p&gt;
function showParents() {
  $("div").css("border-color", "white");
  var len = $("span.selected")
                   .parents("div")
                   .css("border", "2px red solid")
                   .length;
  $("b").text("Unique div parents: " + len);
}
$("span").click(function () {
  $(this).toggleClass("selected");
  showParents();
});&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="parentsUntil" >
				<parameters>
          <parameter name="selector" type="String|SelectorString|Element" usage="optional">
            <description>A string containing a selector expression to indicate where to stop matching ancestor elements.</description>
          </parameter>
          <parameter name="filter" type="String|SelectorString" usage="optional">
            <description>A string containing a selector expression to match elements against.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object.</description>
        <examples>
          <example>
			&lt;p&gt;Find the ancestors of &lt;li class="item-a"&gt; up to &lt;ul class="level-1"&gt; and give them a red background color. Also, find ancestors of &lt;li class="item-2"&gt; that have a class of "yes" up to &lt;ul class="level-1"&gt; and give them a green border.&lt;/p&gt;
		
		&lt;p&gt;
$("li.item-a").parentsUntil(".level-1")
  .css("background-color", "red");

$("li.item-2").parentsUntil( $("ul.level-1"), ".yes" )
  .css("border", "3px solid green");
    
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="position" >
				<return-types>
          <return-type type="Offset"/>
        </return-types>
        <description>Get the current coordinates of the first element in the set of matched elements, relative to the offset parent.</description>
        <examples>
          <example>
			&lt;p&gt;Access the position of the second paragraph:&lt;/p&gt;
		
		&lt;p&gt;
var p = $("p:first");
var position = p.position();
$("p:last").text( "left: " + position.left + ", top: " + position.top );
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="prepend" >
				<parameters>
          <parameter name="content" type="HTMLString|Element|Array|jQuery.fn|String" usage="required">
            <description>DOM element, array of elements, HTML string, or jQuery object to insert at the beginning of each element in the set of matched elements.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.</description>
        <examples>
          <example>
			&lt;p&gt;Prepends some HTML to all paragraphs.&lt;/p&gt;
		
		&lt;p&gt;$("p").prepend("&lt;b&gt;Hello &lt;/b&gt;");&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Prepends a DOM Element to all paragraphs.&lt;/p&gt;
		
		&lt;p&gt;$("p").prepend(document.createTextNode("Hello "));&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Prepends a jQuery object (similar to an Array of DOM Elements) to all paragraphs.&lt;/p&gt;
		
		&lt;p&gt;$("p").prepend( $("b") );&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="prependTo" >
				<parameters>
          <parameter name="target" type="SelectorString|HTMLString|Element|Array|jQuery.fn" usage="required">
            <description>A selector, element, HTML string, or jQuery object; the matched set of elements will be inserted at the beginning of the element(s) specified by this parameter.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Insert every element in the set of matched elements to the beginning of the target.</description>
        <examples>
          <example>
			&lt;p&gt;Prepends all spans to the element with the ID "foo"&lt;/p&gt;
		
		&lt;p&gt;$("span").prependTo("#foo"); // check prepend() examples&lt;/p&gt;
	</example>
        </examples>
        
			</method>
			<method name="prev" >
				<parameters>
          <parameter name="selector" type="Selector|SelectorString" usage="optional">
            <description>A string containing a selector expression to match elements against.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Get the immediately preceding sibling of each element in the set of matched elements, optionally filtered by a selector.</description>
        <examples>
          <example>
			&lt;p&gt;Find the very previous sibling of each div.&lt;/p&gt;
		
		&lt;p&gt;
    var $curr = $("#start");
    $curr.css("background", "#f99");
    $("button").click(function () {
      $curr = $curr.prev();
      $("div").css("background", "");
      $curr.css("background", "#f99");
    });

&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;For each paragraph, find the very previous sibling that has a class "selected".&lt;/p&gt;
		
		&lt;p&gt;$("p").prev(".selected").css("background", "yellow");&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="prevAll" >
				<parameters>
          <parameter name="selector" type="Selector|SelectorString" usage="optional">
            <description>A string containing a selector expression to match elements against.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector.</description>
        <examples>
          <example>
			&lt;p&gt;Locate all the divs preceding the last div and give them a class.&lt;/p&gt;
		
		&lt;p&gt;$("div:last").prevAll().addClass("before");&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="prevUntil" >
				<parameters>
          <parameter name="selector" type="String|SelectorString|Element|jQeury.fn" usage="optional">
            <description>A string containing a selector expression to indicate where to stop matching preceding sibling elements.</description>
          </parameter>
          <parameter name="filter" type="String|SelectorString" usage="optional">
            <description>A string containing a selector expression to match elements against.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object.</description>
        <examples>
          <example>
			&lt;p&gt;Find the siblings that precede &lt;dt id="term-2"&gt; up to the preceding &lt;dt&gt; and give them a red background color. Also, find previous &lt;dd&gt; siblings of &lt;dt id="term-3"&gt; up to &lt;dt id="term-1"&gt; and give them a green text color.&lt;/p&gt;
		
		&lt;p&gt;  
$("#term-2").prevUntil("dt")
  .css("background-color", "red");
  
var term1 = document.getElementById('term-1');
$("#term-3").prevUntil(term1, "dd")
  .css("color", "green");
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="promise" >
				<parameters>
          <parameter name="type" type="String" usage="optional">
            <description> The type of queue that needs to be observed. </description>
          </parameter>
          <parameter name="target" type="Object" usage="optional">
            <description>Object onto which the promise methods have to be attached</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.Promise"/>
        </return-types>
        <description> Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished. </description>
        <examples>
          <example>
			&lt;p&gt;Using .promise() on a collection with no active animation returns a resolved Promise:&lt;/p&gt;
		
		&lt;p&gt;
var div = $( "&lt;div /&gt;" );

div.promise().done(function( arg1 ) {
  // will fire right away and alert "true"
  alert( this === div &amp;&amp; arg1 === div );
});
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Resolve the returned Promise when all animations have ended (including those initiated in the animation callback or added later on):&lt;/p&gt;
		
		&lt;p&gt;
$("button").bind( "click", function() {
  $("p").append( "Started...");
  
  $("div").each(function( i ) {
    $( this ).fadeIn().fadeOut( 1000 * (i+1) );
  });

  $( "div" ).promise().done(function() {
    $( "p" ).append( " Finished! " );
  });
});
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Resolve the returned Promise using a $.when() statement (the .promise() method makes it possible to do this with jQuery collections):&lt;/p&gt;
		
		&lt;p&gt;
var effect = function() {
  return $("div").fadeIn(800).delay(1200).fadeOut();
};

$("button").bind( "click", function() {
  $("p").append( " Started... ");

  $.when( effect() ).done(function() {
    $("p").append(" Finished! ");
  });
});

&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="prop" >
				<parameters>
          <parameter name="propertyName" type="String|AttrString|HTMLElement" usage="required">
            <description>The name of the property to get.</description>
          </parameter>
          <parameter name="value" type="AttrValueString|String|Object" usage="optional">
            <description>A value to set for the property.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <description>Get the value of a property for the first element in the set of matched elements.</description>
        <examples>
          <example>
			&lt;p&gt;Display the checked property and attribute of a checkbox as it changes.&lt;/p&gt;
		
		&lt;p&gt;
$("input").change(function() {
  var $input = $(this);
  $("p").html(".attr('checked'): &lt;b&gt;" + $input.attr('checked') + "&lt;/b&gt;&lt;br&gt;"
              + ".prop('checked'): &lt;b&gt;" + $input.prop('checked') + "&lt;/b&gt;&lt;br&gt;"
              + ".is(':checked'): &lt;b&gt;" + $input.is(':checked') ) + "&lt;/b&gt;";
}).change();
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="pushStack" >
				<parameters>
          <parameter name="elements" type="Array" usage="required">
            <description>An array of elements to push onto the stack and make into a new jQuery object.</description>
          </parameter>
          <parameter name="name" type="String" usage="required">
            <description>The name of a jQuery method that generated the array of elements.</description>
          </parameter>
          <parameter name="arguments" type="Array" usage="required">
            <description>The arguments that were passed in to the jQuery method (for serialization).</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Add a collection of DOM elements onto the jQuery stack.</description>
        <examples>
          <example>
			&lt;p&gt;Add some elements onto the jQuery stack, then pop back off again.&lt;/p&gt;
		
		&lt;p&gt;jQuery([])
    .pushStack( document.getElementsByTagName("div") )
        .remove()
    .end();&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="queue" >
				<parameters>
          <parameter name="queueName" type="String" usage="optional">
            <description>A string containing the name of the queue. Defaults to </description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Show the queue of functions to be executed on the matched elements.</description>
        <examples>
          <example>
			&lt;p&gt;Show the length of the queue.&lt;/p&gt;
		
		&lt;p&gt;
var div = $("div");

function runIt() {
  div.show("slow");
  div.animate({left:'+=200'},2000);
  div.slideToggle(1000);
  div.slideToggle("fast");
  div.animate({left:'-=200'},1500);
  div.hide("slow");
  div.show(1200);
  div.slideUp("normal", runIt);
}

function showIt() {
  var n = div.queue("fx");
  $("span").text( n.length );      
  setTimeout(showIt, 100);
}

runIt();
showIt();
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="ready" >
				<parameters>
          <parameter name="handler" type="Function" usage="required">
            <description>A function to execute after the DOM is ready.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Specify a function to execute when the DOM is fully loaded.</description>
        <examples>
          <example>
			&lt;p&gt;Display a message when the DOM is loaded.&lt;/p&gt;
		
		&lt;p&gt;$(document).ready(function () {
  $("p").text("The DOM is now loaded and can be manipulated.");
});&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="remove" >
				<parameters>
          <parameter name="selector" type="String|SelectorString" usage="optional">
            <description>A selector expression that filters the set of matched elements to be removed.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Remove the set of matched elements from the DOM.</description>
        <examples>
          <example>
			&lt;p&gt;Removes all paragraphs from the DOM&lt;/p&gt;
		
		&lt;p&gt;
    $("button").click(function () {
      $("p").remove();
    });

&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Removes all paragraphs that contain "Hello" from the DOM.  Analogous to doing $("p").filter(":contains('Hello')").remove().&lt;/p&gt;
		
		&lt;p&gt;

    $("button").click(function () {
      $("p").remove(":contains('Hello')");
    });

&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="removeAttr" >
				<parameters>
          <parameter name="attributeName" type="String|AttrString" usage="required">
            <description>An attribute to remove.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Remove an attribute from each element in the set of matched elements.</description>
        <examples>
          <example>
			&lt;p&gt;Clicking the button enables the input next to it.&lt;/p&gt;
		
		&lt;p&gt;
$("button").click(function () {
  $(this).next().removeAttr("disabled")
  .focus()
  .val("editable now");
});
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="removeClass" >
				<parameters>
          <parameter name="className" type="String|ClassString|Function(Number,String|ClassString)" usage="optional">
            <description>One or more space-separated classes to be removed from the class attribute of each matched element.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Remove a single class, multiple classes, or all classes from each element in the set of matched elements.</description>
        <examples>
          <example>
			&lt;p&gt;Remove the class 'blue' from the matched elements.&lt;/p&gt;
		
		&lt;p&gt;$("p:even").removeClass("blue");&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Remove the class 'blue' and 'under' from the matched elements.&lt;/p&gt;
		
		&lt;p&gt;$("p:odd").removeClass("blue under");&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Remove all the classes from the matched elements.&lt;/p&gt;
		
		&lt;p&gt;$("p:eq(1)").removeClass();&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="removeData" >
				<parameters>
          <parameter name="name" type="String" usage="optional">
            <description>A string naming the piece of data to delete.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Remove a previously-stored piece of data.</description>
        <examples>
          <example>
			&lt;p&gt;Set a data store for 2 names then remove one of them.&lt;/p&gt;
		
		&lt;p&gt;

    $("span:eq(0)").text("" + $("div").data("test1"));
    $("div").data("test1", "VALUE-1");
    $("div").data("test2", "VALUE-2");
    $("span:eq(1)").text("" + $("div").data("test1"));
    $("div").removeData("test1");
    $("span:eq(2)").text("" + $("div").data("test1"));
    $("span:eq(3)").text("" + $("div").data("test2"));

&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="removeProp" >
				<parameters>
          <parameter name="propertyName" type="String|AttrString" usage="required">
            <description>The name of the property to set.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Remove a property for the set of matched elements.</description>
        <examples>
          <example>
			&lt;p&gt;Set a numeric property on a paragraph and then remove it. &lt;/p&gt;
		
		&lt;p&gt;
var $para = $("p");
$para.prop("luggageCode", 1234);
$para.append("The secret luggage code is: ", String($para.prop("luggageCode")), ". ");
$para.removeProp("luggageCode");
$para.append("Now the secret luggage code is: ", String($para.prop("luggageCode")), ". ");

&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="replaceAll" >
				<parameters>
          <parameter name="target" type="Selector|SelectorString" usage="required">
            <description>A selector expression indicating which element(s) to replace.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Replace each target element with the set of matched elements.</description>
        <examples>
          <example>
			&lt;p&gt;Replace all the paragraphs with bold words.&lt;/p&gt;
		
		&lt;p&gt;$("&lt;b&gt;Paragraph. &lt;/b&gt;").replaceAll("p"); // check replaceWith() examples&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="replaceWith" >
				<parameters>
          <parameter name="newContent" type="String| Element| jQuery.fn|HTMLString" usage="required">
            <description>The content to insert. May be an HTML string, DOM element, or jQuery object.</description>
          </parameter>
          <parameter name="function" type="Function" usage="required">
            <description>A function that returns content with which to replace the set of matched elements.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Replace each element in the set of matched elements with the provided new content.</description>
        <examples>
          <example>
			&lt;p&gt;On click, replace the button with a div containing the same word.&lt;/p&gt;
		
		&lt;p&gt;
$("button").click(function () {
  $(this).replaceWith( "&lt;div&gt;" + $(this).text() + "&lt;/div&gt;" );
});
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Replace all paragraphs with bold words.&lt;/p&gt;
		
		&lt;p&gt;
$("p").replaceWith( "&lt;b&gt;Paragraph. &lt;/b&gt;" );
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;On click, replace each paragraph with a div that is already in the DOM and selected with the $() function. Notice it doesn't clone the object but rather moves it to replace the paragraph.&lt;/p&gt;
		
		&lt;p&gt;
$("p").click(function () {
  $(this).replaceWith( $("div") );
});
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;On button click, replace the containing div with its child divs and append the class name of the selected element to the paragraph.&lt;/p&gt;
		
		&lt;p&gt;
$('button').bind("click", function() {
  var $container = $("div.container").replaceWith(function() {
    return $(this).contents();
  });

  $("p").append( $container.attr("class") );
});
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="resize" >
				<parameters>
          <parameter name="handler" type="Function" usage="optional">
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
          <parameter name="eventData" type="Object" usage="optional">
            <description>A map of data that will be passed to the event handler.</description>
          </parameter>
          <parameter name="handler" type="Function" usage="optional">
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Bind an event handler to the "resize" JavaScript event, or trigger that event on an element.</description>
        <examples>
          <example>
			&lt;p&gt;To see the window width while (or after) it is resized, try:&lt;/p&gt;
		
		&lt;p&gt;
$(window).resize(function() {
  $('body').prepend('&lt;div&gt;' + $(window).width() + '&lt;/div&gt;');
});
  &lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="scroll" >
				<parameters>
          <parameter name="handler" type="Function" usage="required">
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
          <parameter name="eventData" type="Object" usage="optional">
            <description>A map of data that will be passed to the event handler.</description>
          </parameter>
          <parameter name="handler" type="Function" usage="required">
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Bind an event handler to the "scroll" JavaScript event, or trigger that event on an element.</description>
        <examples>
          <example>
			&lt;p&gt;To do something when your page is scrolled:&lt;/p&gt;
		
		&lt;p&gt;
    $("p").clone().appendTo(document.body);
    $("p").clone().appendTo(document.body);
    $("p").clone().appendTo(document.body);
    $(window).scroll(function () { 
      $("span").css("display", "inline").fadeOut("slow"); 
    });

&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="select" >
        <parameters>
          <parameter name="eventData" type="Object" usage="optional">
            <description>A map of data that will be passed to the event handler.</description>
          </parameter>
          <parameter name="handler" type="Function" usage="required">
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Bind an event handler to the "select" JavaScript event, or trigger that event on an element.</description>
        <examples>
          <example>
			&lt;p&gt;To do something when text in input boxes is selected:&lt;/p&gt;
		
		&lt;p&gt;
    $(":input").select( function () { 
      $("div").text("Something was selected").show().fadeOut(1000); 
    });
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;To trigger the select event on all input elements, try:&lt;/p&gt;
		
		&lt;p&gt;$("input").select();&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="serialize" >
				<return-types>
          <return-type type="String"/>
        </return-types>
        <description>Encode a set of form elements as a string for submission.</description>
        <examples>
          <example>
			&lt;p&gt;Serialize a form to a query string, that could be sent to a server in an Ajax request.&lt;/p&gt;
		
		&lt;p&gt;
    function showValues() {
      var str = $("form").serialize();
      $("#results").text(str);
    }
    $(":checkbox, :radio").click(showValues);
    $("select").change(showValues);
    showValues();
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="serializeArray" >
				<return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Encode a set of form elements as an array of names and values.</description>
        <examples>
          <example>
			&lt;p&gt;Get the values from a form, iterate through them, and append them to a results display.&lt;/p&gt;
		
		&lt;p&gt;

    function showValues() {
      var fields = $(":input").serializeArray();
      $("#results").empty();
      jQuery.each(fields, function(i, field){
        $("#results").append(field.value + " ");
      });
    }

    $(":checkbox, :radio").click(showValues);
    $("select").change(showValues);
    showValues();
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="scrollTop" scope="instance">
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>Get the current vertical position of the scroll bar for the first element in the set of matched elements.</description>
        <examples>
          <example>
			&lt;p&gt;Get the scrollTop of a paragraph.&lt;/p&gt;
		
		&lt;p&gt;var p = $("p:first");
$("p:last").text( "scrollTop:" + p.scrollTop() );

&lt;/p&gt;
	</example>
        </examples>
      </method>
			<method name="scrollLeft" scope="instance">
        <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>Get the current horizontal position of the scroll bar for the first element in the set of matched elements.</description>
        <examples>
          <example>
			&lt;p&gt;Get the scrollLeft of a paragraph.&lt;/p&gt;
		
		&lt;p&gt;var p = $("p:first");
			$("p:last").text( "scrollLeft:" + p.scrollLeft() );

			&lt;/p&gt;
	</example>
        </examples>
      </method>
			<method name="show" >
				<parameters>
          <parameter name="duration" type="String|Number" usage="optional">
            <description>A string or number determining how long the animation will run.</description>
          </parameter>
          <parameter name="easing" type="String" usage="optional">
            <description>A string indicating which easing function to use for the transition.</description>
          </parameter>
          <parameter name="callback" type="Function" usage="optional">
            <description>A function to call once the animation is complete.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Display the matched elements.</description>
        <examples>
          <example>
			&lt;p&gt;Animates all hidden paragraphs to show slowly, completing the animation within 600 milliseconds.&lt;/p&gt;
		
		&lt;p&gt;
    $("button").click(function () {
    $("p").show("slow");
    });
    &lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Animates all hidden divs to show fastly in order, completing each animation within 200 milliseconds. Once each animation is done, it starts the next one.&lt;/p&gt;
		
		&lt;p&gt;
$("#showr").click(function () {
  $("div:eq(0)").show("fast", function () {
    /* use callee so don't have to name the function */
    $(this).next("div").show("fast", arguments.callee);
  });
});
$("#hidr").click(function () {
  $("div").hide(2000);
});

&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Shows all span and input elements with an animation. Once the animation is done, it changes the text.&lt;/p&gt;
		
		&lt;p&gt;
function doIt() {
  $("span,div").show("slow");
}
/* can pass in function name */
$("button").click(doIt);

$("form").submit(function () {
  if ($("input").val() == "yes") {
    $("p").show(4000, function () {
      $(this).text("Ok, DONE! (now showing)");
    });
  }
  $("span,div").hide("fast");
  /* to stop the submit */
  return false; 
});
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="siblings" >
				<parameters>
          <parameter name="selector" type="Selector|SelectorString" usage="optional">
            <description>A string containing a selector expression to match elements against.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Get the siblings of each element in the set of matched elements, optionally filtered by a selector.</description>
        <examples>
          <example>
			&lt;p&gt;Find the unique siblings of all yellow li elements in the 3 lists (including other yellow li elements if appropriate).&lt;/p&gt;
		
		&lt;p&gt;

    var len = $(".hilite").siblings()
                          .css("color", "red")
                          .length;
    $("b").text(len);
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Find all siblings with a class "selected" of each div.&lt;/p&gt;
		
		&lt;p&gt;$("p").siblings(".selected").css("background", "yellow");&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="slice" >
				<parameters>
          <parameter name="start" type="Number" usage="required">
            <description>An integer indicating the 0-based position at which the elements begin to be selected. If negative, it indicates an offset from the end of the set.</description>
          </parameter>
          <parameter name="end" type="Number" usage="optional">
            <description>An integer indicating the 0-based position at which the elements stop being selected. If negative, it indicates an offset from the end of the set. If omitted, the range continues until the end of the set.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Reduce the set of matched elements to a subset specified by a range of indices.</description>
        <examples>
          <example>
			&lt;p&gt;Turns divs yellow based on a random slice.&lt;/p&gt;
		
		&lt;p&gt;

    function colorEm() {
      var $div = $("div");
      var start = Math.floor(Math.random() *
                             $div.length);
      var end = Math.floor(Math.random() *
                           ($div.length - start)) +
                           start + 1;
      if (end == $div.length) end = undefined;
      $div.css("background", "");
      if (end) 
        $div.slice(start, end).css("background", "yellow");   
       else
        $div.slice(start).css("background", "yellow");
      
      $("span").text('$("div").slice(' + start +
                     (end ? ', ' + end : '') +
                     ').css("background", "yellow");');
    }

    $("button").click(colorEm);

&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Selects all paragraphs, then slices the selection to include only the first element.&lt;/p&gt;
		
		&lt;p&gt;$("p").slice(0, 1).wrapInner("&lt;b&gt;&lt;/b&gt;");&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Selects all paragraphs, then slices the selection to include only the first and second element.&lt;/p&gt;
		
		&lt;p&gt;$("p").slice(0, 2).wrapInner("&lt;b&gt;&lt;/b&gt;");&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Selects all paragraphs, then slices the selection to include only the second element.&lt;/p&gt;
		
		&lt;p&gt;$("p").slice(1, 2).wrapInner("&lt;b&gt;&lt;/b&gt;");&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Selects all paragraphs, then slices the selection to include only the second and third element.&lt;/p&gt;
		
		&lt;p&gt;$("p").slice(1).wrapInner("&lt;b&gt;&lt;/b&gt;");&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Selects all paragraphs, then slices the selection to include only the third element.&lt;/p&gt;
		
		&lt;p&gt;$("p").slice(-1).wrapInner("&lt;b&gt;&lt;/b&gt;");&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="slideDown" >
				<parameters>
          <parameter name="duration" type="String|Number" usage="optional">
            <description>A string or number determining how long the animation will run.</description>
          </parameter>
          <parameter name="easing" type="String" usage="optional">
            <description>A string indicating which easing function to use for the transition.</description>
          </parameter>
          <parameter name="callback" type="Function" usage="optional">
            <description>A function to call once the animation is complete.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Display the matched elements with a sliding motion.</description>
        <examples>
          <example>
			&lt;p&gt;Animates all divs to slide down and show themselves over 600 milliseconds.&lt;/p&gt;
		
		&lt;p&gt;
$(document.body).click(function () {
if ($("div:first").is(":hidden")) {
$("div").slideDown("slow");
} else {
$("div").hide();
}
});

&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Animates all inputs to slide down, completing the animation within 1000 milliseconds. Once the animation is done, the input look is changed especially if it is the middle input which gets the focus.&lt;/p&gt;
		
		&lt;p&gt;
$("div").click(function () {
$(this).css({ borderStyle:"inset", cursor:"wait" });
$("input").slideDown(1000,function(){
$(this).css("border", "2px red inset")
.filter(".middle")
 .css("background", "yellow")
 .focus();
$("div").css("visibility", "hidden");
});
});

&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="slideToggle" >
				<parameters>
          <parameter name="duration" type="String|Number" usage="optional">
            <description>A string or number determining how long the animation will run.</description>
          </parameter>
          <parameter name="easing" type="String" usage="optional">
            <description>A string indicating which easing function to use for the transition.</description>
          </parameter>
          <parameter name="callback" type="Function" usage="optional">
            <description>A function to call once the animation is complete.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Display or hide the matched elements with a sliding motion.</description>
        <examples>
          <example>
			&lt;p&gt;Animates all paragraphs to slide up or down, completing the animation within 600 milliseconds.&lt;/p&gt;
		
		&lt;p&gt;
    $("button").click(function () {
      $("p").slideToggle("slow");
    });
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Animates divs between dividers with a toggle that makes some appear and some disappear.&lt;/p&gt;
		
		&lt;p&gt;
  $("#aa").click(function () {
    $("div:not(.still)").slideToggle("slow", function () {
      var n = parseInt($("span").text(), 10);
      $("span").text(n + 1);
    });
  });

&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="clearQueue" scope="instance">
        <parameters>
          <parameter name="queueName" type="String" usage="optional">
            <description>A string containing the name of the queue. Defaults to </description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Remove from the queue all items that have not yet been run.</description>
        <examples>
          <example>
			&lt;p&gt;Empty the queue.&lt;/p&gt;
		
		&lt;p&gt;$("#start").click(function () {
  $("div").show("slow");
  $("div").animate({left:'+=200'},5000);
  $("div").queue(function () {
    $(this).addClass("newcolor");
    $(this).dequeue();
  });
  $("div").animate({left:'-=200'},1500);
  $("div").queue(function () {
    $(this).removeClass("newcolor");
    $(this).dequeue();
  });
  $("div").slideUp();
});
$("#stop").click(function () {
  $("div").clearQueue();
  $("div").stop();
});&lt;/p&gt;
	</example>
        </examples>
      </method>
			<method name="slideUp" >
				<parameters>
          <parameter name="duration" type="String|Number" usage="optional">
            <description>A string or number determining how long the animation will run.</description>
          </parameter>
          <parameter name="easing" type="String" usage="optional">
            <description>A string indicating which easing function to use for the transition.</description>
          </parameter>
          <parameter name="callback" type="Function" usage="optional">
            <description>A function to call once the animation is complete.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Hide the matched elements with a sliding motion.</description>
        <examples>
          <example>
			&lt;p&gt;Animates all divs to slide up, completing the animation within 400 milliseconds.&lt;/p&gt;
		
		&lt;p&gt;
  $(document.body).click(function () {
    if ($("div:first").is(":hidden")) {
      $("div").show("slow");
    } else {
      $("div").slideUp();
    }
  });

  &lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Animates the parent paragraph to slide up, completing the animation within 200 milliseconds. Once the animation is done, it displays an alert.&lt;/p&gt;
		
		&lt;p&gt;
  $("button").click(function () {
    $(this).parent().slideUp("slow", function () {
      $("#msg").text($("button", this).text() + " has completed.");
    });
  });

&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="stop" >
				<parameters>
          <parameter name="clearQueue" type="Boolean" usage="optional">
            <description>A Boolean indicating whether to remove queued animation as well. Defaults to </description>
          </parameter>
          <parameter name="jumpToEnd" type="Boolean" usage="optional">
            <description>A Boolean indicating whether to complete the current animation immediately. Defaults to </description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Stop the currently-running animation on the matched elements.</description>
        <examples>
          <example>
			&lt;p&gt;Click the Go button once to start the animation, then click the STOP button to stop it where it's currently positioned.  Another option is to click several buttons to queue them up and see that stop just kills the currently playing one.&lt;/p&gt;
		
		&lt;p&gt;
/* Start animation */
$("#go").click(function(){
$(".block").animate({left: '+=100px'}, 2000);
});

/* Stop animation when button is clicked */
$("#stop").click(function(){
$(".block").stop();
});

/* Start animation in the opposite direction */
$("#back").click(function(){
$(".block").animate({left: '-=100px'}, 2000);
});

&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="submit" >
				<parameters>
          <parameter name="handler" type="Function" usage="required">
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
          <parameter name="eventData" type="Object" usage="optional">
            <description>A map of data that will be passed to the event handler.</description>
          </parameter>
          <parameter name="handler" type="Function" usage="required">
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Bind an event handler to the "submit" JavaScript event, or trigger that event on an element.</description>
        <examples>
          <example>
			&lt;p&gt;If you'd like to prevent forms from being submitted unless a flag variable is set, try:&lt;/p&gt;
		
		&lt;p&gt;

    $("form").submit(function() {
      if ($("input:first").val() == "correct") {
        $("span").text("Validated...").show();
        return true;
      }
      $("span").text("Not valid!").show().fadeOut(1000);
      return false;
    });
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;If you'd like to prevent forms from being submitted unless a flag variable is set, try:&lt;/p&gt;
		
		&lt;p&gt;$("form").submit( function () {
  return this.some_flag_variable;
} );&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;To trigger the submit event on the first form on the page, try:&lt;/p&gt;
		
		&lt;p&gt;$("form:first").submit();&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="text" >
				 <parameters>
          <parameter name="textString" type="String" usage="required">
            <description>A string of text to set as the content of each matched element.</description>
          </parameter>
          <parameter name="function" type="Function" usage="optional">
            <description>A function returning the text content to set. Receives the index position of the element in the set and the old text value as arguments.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Set the content of each element in the set of matched elements to the specified text.</description>
        <examples>
          <example>
			&lt;p&gt;Add text to the paragraph (notice the bold tag is escaped).&lt;/p&gt;
		
		&lt;p&gt;$("p").text("&lt;b&gt;Some&lt;/b&gt; new text.");&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="toArray" >
				<return-types>
          <return-type type="Array"/>
        </return-types>
        <description>Retrieve all the DOM elements contained in the jQuery set, as an array.</description>
        <examples>
          <example>
			&lt;p&gt;Selects all divs in the document and returns the DOM Elements as an Array, then uses the built-in reverse-method to reverse that array.&lt;/p&gt;
		
		&lt;p&gt;

    function disp(divs) {
      var a = [];
      for (var i = 0; i &lt; divs.length; i++) {
        a.push(divs[i].innerHTML);
      }
      $("span").text(a.join(" "));
    }
    
    disp( $("div").toArray().reverse() );
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="toggle" >
				<parameters>
          <parameter name="duration" type="String|Number" usage="optional">
            <description>A string or number determining how long the animation will run.</description>
          </parameter>
          <parameter name="easing" type="String" usage="optional">
            <description>A string indicating which easing function to use for the transition.</description>
          </parameter>
          <parameter name="callback" type="Function" usage="optional">
            <description>A function to call once the animation is complete.</description>
          </parameter>
          <parameter name="showOrHide" type="Boolean" usage="required">
            <description>A Boolean indicating whether to show or hide the elements.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Display or hide the matched elements.</description>
        <examples>
          <example>
			&lt;p&gt;Toggles all paragraphs.&lt;/p&gt;
		
		&lt;p&gt;

$("button").click(function () {
$("p").toggle();
});
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Animates all paragraphs to be shown if they are hidden and hidden if they are visible, completing the animation within 600 milliseconds.&lt;/p&gt;
		
		&lt;p&gt;
$("button").click(function () {
$("p").toggle("slow");
});    
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Shows all paragraphs, then hides them all, back and forth.&lt;/p&gt;
		
		&lt;p&gt;

var flip = 0;
$("button").click(function () {
$("p").toggle( flip++ % 2 == 0 );
});
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="toggleClass" >
				<parameters>
          <parameter name="className" type="String|ClassString" usage="required">
            <description>One or more class names (separated by spaces) to be toggled for each element in the matched set.</description>
          </parameter>
          <parameter name="function" type="Function" usage="optional">
            <description>A function that returns class names to be toggled in the class attribute of each element in the matched set. Receives the index position of the element in the set, the old class value, and the switch as arguments.</description>
          </parameter>
          <parameter name="switch" type="Boolean" usage="optional">
            <description>A boolean value to determine whether the class should be added or removed.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the switch argument.</description>
        <examples>
          <example>
			&lt;p&gt;Toggle the class 'highlight' when a paragraph is clicked.&lt;/p&gt;
		
		&lt;p&gt;
    $("p").click(function () {
      $(this).toggleClass("highlight");
    });
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Add the "highlight" class to the clicked paragraph on every third click of that paragraph, remove it every first and second click.&lt;/p&gt;
		
		&lt;p&gt;
var count = 0;
$("p").each(function() {
  var $thisParagraph = $(this);
  var count = 0;
  $thisParagraph.click(function() {
    count++;
    $thisParagraph.find("span").text('clicks: ' + count);
    $thisParagraph.toggleClass("highlight", count % 3 == 0);
  });
});

&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="trigger" >
				<parameters>
          <parameter name="eventType" type="String|EventString" usage="required">
            <description>A string containing a JavaScript event type, such as </description>
          </parameter>
          <parameter name="extraParameters" type="Object" usage="required">
            <description>Additional parameters to pass along to the event handler.</description>
          </parameter>
          <parameter name="event" type="Event" usage="required">
            <description>A </description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Execute all handlers and behaviors attached to the matched elements for the given event type.</description>
        <examples>
          <example>
			&lt;p&gt;Clicks to button #2 also trigger a click for button #1.&lt;/p&gt;
		
		&lt;p&gt;
$("button:first").click(function () {
update($("span:first"));
});
$("button:last").click(function () {
$("button:first").trigger('click');

update($("span:last"));
});

function update(j) {
var n = parseInt(j.text(), 10);
j.text(n + 1);
}
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;To submit the first form without using the submit() function, try:&lt;/p&gt;
		
		&lt;p&gt;$("form:first").trigger("submit")&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;To submit the first form without using the submit() function, try:&lt;/p&gt;
		
		&lt;p&gt;var event = jQuery.Event("submit");
$("form:first").trigger(event);
if ( event.isDefaultPrevented() ) {
// Perform an action...
}&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;To pass arbitrary data to an event:&lt;/p&gt;
		
		&lt;p&gt;$("p").click( function (event, a, b) {
// when a normal click fires, a and b are undefined
// for a trigger like below a refers to "foo" and b refers to "bar"

} ).trigger("click", ["foo", "bar"]);&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;To pass arbitrary data through an event object:&lt;/p&gt;
		
		&lt;p&gt;var event = jQuery.Event("logged");
event.user = "foo";
event.pass = "bar";
$("body").trigger(event);&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Alternative way to pass data through an event object:&lt;/p&gt;
		
		&lt;p&gt;$("body").trigger({
type:"logged",
user:"foo",
pass:"bar"

});&lt;/p&gt;
	</example>
        </examples>
      
			</method>
			<method name="triggerHandler" >
				<parameters>
          <parameter name="eventType" type="String|EventString" usage="required">
            <description>A string containing a JavaScript event type, such as </description>
          </parameter>
          <parameter name="extraParameters" type="Array" usage="required">
            <description>An array of additional parameters to pass along to the event handler.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Object"/>
        </return-types>
        <description>Execute all handlers attached to an element for an event.</description>
        <examples>
          <example>
			&lt;p&gt;If you called .triggerHandler() on a focus event - the browser's default focus action would not be triggered, only the event handlers bound to the focus event.&lt;/p&gt;
		
		&lt;p&gt;

$("#old").click(function(){
$("input").trigger("focus");
});
$("#new").click(function(){
$("input").triggerHandler("focus");
});
$("input").focus(function(){
$("&lt;span&gt;Focused!&lt;/span&gt;").appendTo("body").fadeOut(1000);
});

&lt;/p&gt;
	</example>
        </examples>

			</method>
			<method name="unbind" >
				<parameters>
          <parameter name="eventType" type="String|EventString" usage="optional">
            <description>A string containing a JavaScript event type, such as </description>
          </parameter>
          <parameter name="handler" type="Function|Boolean" usage="optional">
            <description>The function that is to be no longer executed.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Remove a previously-attached event handler from the elements.</description>
        <examples>
          <example>
			&lt;p&gt;Can bind and unbind events to the colored button.&lt;/p&gt;
		
		&lt;p&gt;

function aClick() {
$("div").show().fadeOut("slow");
}
$("#bind").click(function () {
// could use .bind('click', aClick) instead but for variety...
$("#theone").click(aClick)
  .text("Can Click!");
});
$("#unbind").click(function () {
$("#theone").unbind('click', aClick)
  .text("Does nothing...");
});

&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;To unbind all events from all paragraphs, write:&lt;/p&gt;
		
		&lt;p&gt;$("p").unbind()&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;To unbind all click events from all paragraphs, write:&lt;/p&gt;
		
		&lt;p&gt;$("p").unbind( "click" )&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;To unbind just one previously bound handler, pass the function in as the second argument:&lt;/p&gt;
		
		&lt;p&gt;var foo = function () {
// code to handle some kind of event
};

$("p").bind("click", foo); // ... now foo will be called when paragraphs are clicked ...

$("p").unbind("click", foo); // ... foo will no longer be called.&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="undelegate" >
				<parameters>
          <parameter name="selector" type="String|SelectorString" usage="optional">
            <description>A selector which will be used to filter the event results.</description>
          </parameter>
          <parameter name="eventType" type="String|EventString" usage="optional">
            <description>A string containing a JavaScript event type, such as "click" or "keydown"</description>
          </parameter>
          <parameter name="handler" type="Function" usage="optional">
            <description>A function to execute at the time the event is triggered.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Remove a handler from the event for all elements which match the current selector, now or in the future, based upon a specific set of root elements.</description>
        <examples>
          <example>
			&lt;p&gt;Can bind and unbind events to the colored button.&lt;/p&gt;
		
		&lt;p&gt;
function aClick() {
  $("div").show().fadeOut("slow");
}
$("#bind").click(function () {
  $("body").delegate("#theone", "click", aClick)
    .find("#theone").text("Can Click!");
});
$("#unbind").click(function () {
  $("body").undelegate("#theone", "click", aClick)
    .find("#theone").text("Does nothing...");
});
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;To unbind all delegated events from all paragraphs, write:&lt;/p&gt;
		
		&lt;p&gt;$("p").undelegate()&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;To unbind all delegated click events from all paragraphs, write:&lt;/p&gt;
		
		&lt;p&gt;$("p").undelegate( "click" )&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;To undelegate just one previously bound handler, pass the function in as the third argument:&lt;/p&gt;
		
		&lt;p&gt;var foo = function () {
// code to handle some kind of event
};

// ... now foo will be called when paragraphs are clicked ...
$("body").delegate("p", "click", foo);


// ... foo will no longer be called.
$("body").undelegate("p", "click", foo); &lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;To unbind all delegated events by their namespace:&lt;/p&gt;
		
		&lt;p&gt;var foo = function () {
// code to handle some kind of event
};

// delegate events under the ".whatever" namespace
$("form").delegate("click.whatever", ":button", foo);

$("form").delegate("keypress.whatever", ":text", foo); 

// unbind all events delegated under the ".whatever" namespace

$("form").undelegate(".whatever");&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="unwrap" >
				<return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place.</description>
        <examples>
          <example>
			&lt;p&gt;Wrap/unwrap a div around each of the paragraphs.&lt;/p&gt;
		
		&lt;p&gt;
$("button").toggle(function(){
  $("p").wrap("&lt;div&gt;&lt;/div&gt;");
}, function(){
  $("p").unwrap();
});&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="val" >
				<return-types>
          <return-type type="String"/>
          <return-type type="Number"/>
          <return-type type="Array"/>
        </return-types>
        <description>Get the current value of the first element in the set of matched elements.</description>
        <examples>
          <example>
			&lt;p&gt;Get the single value from a single select and an array of values from a multiple select and display their values.&lt;/p&gt;
		
		&lt;p&gt;
    function displayVals() {
      var singleValues = $("#single").val();
      var multipleValues = $("#multiple").val() || [];
      $("p").html("&lt;b&gt;Single:&lt;/b&gt; " + 
                  singleValues +
                  " &lt;b&gt;Multiple:&lt;/b&gt; " + 
                  multipleValues.join(", "));
    }

    $("select").change(displayVals);
    displayVals();

&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Find the value of an input box.&lt;/p&gt;
		
		&lt;p&gt;
    $("input").keyup(function () {
      var value = $(this).val();
      $("p").text(value);
    }).keyup();
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="width" >
				 <return-types>
          <return-type type="Number"/>
        </return-types>
        <description>Get the current computed width for the first element in the set of matched elements.</description>
        <examples>
          <example>
			&lt;p&gt;Show various widths.  Note the values are from the iframe so might be smaller than you expected.  The yellow highlight shows the iframe body.&lt;/p&gt;
		
		&lt;p&gt;
    function showWidth(ele, w) {
      $("div").text("The width for the " + ele + 
                    " is " + w + "px.");
    }
    $("#getp").click(function () { 
      showWidth("paragraph", $("p").width()); 
    });
    $("#getd").click(function () { 
      showWidth("document", $(document).width()); 
    });
    $("#getw").click(function () { 
      showWidth("window", $(window).width()); 
    });

&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="wrap" >
				<parameters>
          <parameter name="wrappingElement" type="String| Selector| Element| jQuery|HTMLString" usage="required">
            <description>An HTML snippet, selector expression, jQuery object, or DOM element specifying the structure to wrap around the matched elements.</description>
          </parameter>
          <parameter name="function" type="Function" usage="required">
            <description>A callback function returning the HTML content or jQuery object to wrap around the matched elements. Receives the index position of the element in the set as an argument. Within the function, </description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Wrap an HTML structure around each element in the set of matched elements.</description>
        <examples>
          <example>
			&lt;p&gt;Wrap a new div around all of the paragraphs.&lt;/p&gt;
		
		&lt;p&gt;$("p").wrap("&lt;div&gt;&lt;/div&gt;");&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Wraps a newly created tree of objects around the spans.  Notice anything in between the spans gets left out like the &lt;strong&gt; (red text) in this example.  Even the white space between spans is left out.  Click View Source to see the original html.&lt;/p&gt;
		
		&lt;p&gt;$("span").wrap("&lt;div&gt;&lt;div&gt;&lt;p&gt;&lt;em&gt;&lt;b&gt;&lt;/b&gt;&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;");&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Wrap a new div around all of the paragraphs.&lt;/p&gt;
		
		&lt;p&gt;$("p").wrap(document.createElement("div"));&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Wrap a jQuery object double depth div around all of the paragraphs.  Notice it doesn't move the object but just clones it to wrap around its target.&lt;/p&gt;
		
		&lt;p&gt;$("p").wrap($(".doublediv"));&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="wrapAll" >
				<parameters>
          <parameter name="wrappingElement" type="String| Selector| Element| jQuery.fn|HTMLString" usage="required">
            <description>An HTML snippet, selector expression, jQuery object, or DOM element specifying the structure to wrap around the matched elements.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Wrap an HTML structure around all elements in the set of matched elements.</description>
        <examples>
          <example>
			&lt;p&gt;Wrap a new div around all of the paragraphs.&lt;/p&gt;
		
		&lt;p&gt;$("p").wrapAll("&lt;div&gt;&lt;/div&gt;");&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Wraps a newly created tree of objects around the spans.  Notice anything in between the spans gets left out like the &lt;strong&gt; (red text) in this example.  Even the white space between spans is left out.  Click View Source to see the original html.&lt;/p&gt;
		
		&lt;p&gt;$("span").wrapAll("&lt;div&gt;&lt;div&gt;&lt;p&gt;&lt;em&gt;&lt;b&gt;&lt;/b&gt;&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;");&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Wrap a new div around all of the paragraphs.&lt;/p&gt;
		
		&lt;p&gt;$("p").wrapAll(document.createElement("div"));&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Wrap a jQuery object double depth div around all of the paragraphs.  Notice it doesn't move the object but just clones it to wrap around its target.&lt;/p&gt;
		
		&lt;p&gt;$("p").wrapAll($(".doublediv"));&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="wrapInner" >
				<parameters>
          <parameter name="wrappingElement" type="String|HTMLString" usage="required">
            <description>An HTML snippet, selector expression, jQuery object, or DOM element specifying the structure to wrap around the content of the matched elements.</description>
          </parameter>
          <parameter name="function" type="Function" usage="required">
            <description>A callback function which generates a structure to wrap around the content of the matched elements. Receives the index position of the element in the set as an argument. Within the function, </description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.fn"/>
        </return-types>
        <description>Wrap an HTML structure around the content of each element in the set of matched elements.</description>
        <examples>
          <example>
			&lt;p&gt;Selects all paragraphs and wraps a bold tag around each of its contents.&lt;/p&gt;
		
		&lt;p&gt;$("p").wrapInner("&lt;b&gt;&lt;/b&gt;");&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Wraps a newly created tree of objects around the inside of the body.&lt;/p&gt;
		
		&lt;p&gt;$("body").wrapInner("&lt;div&gt;&lt;div&gt;&lt;p&gt;&lt;em&gt;&lt;b&gt;&lt;/b&gt;&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;");&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Selects all paragraphs and wraps a bold tag around each of its contents.&lt;/p&gt;
		
		&lt;p&gt;$("p").wrapInner(document.createElement("b"));&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Selects all paragraphs and wraps a jQuery object around each of its contents.&lt;/p&gt;
		
		&lt;p&gt;$("p").wrapInner($("&lt;span class='red'&gt;&lt;/span&gt;"));&lt;/p&gt;
	</example>
        </examples>
      
			</method>
		</methods>
		<properties>
			<property type="String" name="jquery" >
				 <description>A string containing the jQuery version number.</description>
        <examples>
          <example>
			&lt;p&gt;Determine if an object is a jQuery object&lt;/p&gt;
		
		&lt;p&gt;
var a = { what: "A regular JS object" },
    b = $('body');
     
if ( a.jquery ) { // falsy, since it's undefined
    alert(' a is a jQuery object! ');    
}

if ( b.jquery ) { // truthy, since it's a string
    alert(' b is a jQuery object! ');
}
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Get the current version of jQuery running on the page&lt;/p&gt;
		
		&lt;p&gt;
alert( 'You are running jQuery version: ' + $.fn.jquery );
&lt;/p&gt;
	</example>
        </examples>
			</property>
			<property type="Number" name="length" >
				<description>The number of elements in the jQuery object.</description>
			</property>
			<property type="String" name="selector" >
				<description>A selector representing selector passed to jQuery(), if any, when creating the original set.</description>
			</property>
			<property type="Array.prototype.push" name="push" >
				<description>Mutates an array by appending the given elements and returning the new length of the array.</description>
			</property>
			<property type="Array.prototype.sort" name="sort" >
				<description>Sorts the elements of an array in place and returns the array.</description>
			</property>
			<property type="Array.prototype.splice" name="splice" >
				<description>Changes the content of an array, adding new elements while removing old elements.</description>
			</property>
		</properties>
	</class>
	<class type="jQuery.Callbacks" superclass="Object">
		<methods>
			<method name="add" >
				<return-types>
					<return-type type="jQuery.Callbacks"/>
				</return-types>
				<parameters>
					<parameter name="callbacks" type="Object" usage=""/>
				</parameters>
			</method>
			<method name="disable" >
				<return-types>
					<return-type type="jQuery.Callbacks"/>
				</return-types>
			</method>
			<method name="disabled" >
				<return-types>
					<return-type type="Boolean"/>
				</return-types>
			</method>
			<method name="empty" >
				<return-types>
					<return-type type="jQuery.Callbacks"/>
				</return-types>
			</method>
			<method name="fire" >
				<return-types>
					<return-type type="jQuery.Callbacks"/>
				</return-types>
				<parameters>
					<parameter name="arguments" type="Object" usage=""/>
				</parameters>
			</method>
			<method name="fired" >
				<return-types>
					<return-type type="Boolean"/>
				</return-types>
			</method>
			<method name="fireWith" >
				<return-types>
					<return-type type="jQuery.Callbacks"/>
				</return-types>
				<parameters>
					<parameter name="context" type="Object" usage="optional"/>
					<parameter name="args" type="Object" usage="optional"/>
				</parameters>
			</method>
			<method name="has" >
				<return-types>
					<return-type type="Boolean"/>
				</return-types>
				<parameters>
					<parameter name="callback" type="Function" usage=""/>
				</parameters>
			</method>
			<method name="lock" >
				<return-types>
					<return-type type="jQuery.Callbacks"/>
				</return-types>
			</method>
			<method name="locked" >
				<return-types>
					<return-type type="Boolean"/>
				</return-types>
			</method>
			<method name="remove" >
				<return-types>
					<return-type type="jQuery.Callbacks"/>
				</return-types>
				<parameters>
					<parameter name="callbacks" type="Object" usage=""/>
				</parameters>
			</method>
		</methods>
	</class>
	<class type="jQuery.Event" superclass="Object">
		<methods>
			<method name="isDefaultPrevented" >
				<return-types>
					<return-type type="Boolean"/>
				</return-types>
			</method>
			<method name="isImmediatePropagationStopped" >
				<return-types>
					<return-type type="Boolean"/>
				</return-types>
			</method>
			<method name="isPropagationStopped" >
				<return-types>
					<return-type type="Boolean"/>
				</return-types>
			</method>
			<method name="preventDefault" >
				<return-types>
					<return-type type="Function"/>
				</return-types>
			</method>
			<method name="stopImmediatePropagation" >
				<return-types>
					<return-type type="Function"/>
				</return-types>
			</method>
			<method name="stopPropagation" >
				<return-types>
					<return-type type="Function"/>
				</return-types>
			</method>
		</methods>
		<properties>
			<property type="Element" name="currentTarget" >
				<description>The current DOM element within the event bubbling phase.</description>
			</property>
			<property type="Object" name="data" >
				<description>An optional object of data passed to an event method when the current executing handler is bound.</description>
			</property>
			<property type="Element" name="delegateTarget" >
				<description>The element where the currently-called jQuery event handler was attached.</description>
			</property>
			<property type="Boolean" name="metaKey" >
				<description>Indicates whether the META key was pressed when the event fired.</description>
			</property>
			<property type="String" name="namespace" >
				<description>The namespace specified when the event was triggered.</description>
			</property>
			<property type="Number" name="pageX" >
				<description>The mouse position relative to the left edge of the document.</description>
			</property>
			<property type="Number" name="pageY" >
				<description>The mouse position relative to the top edge of the document.</description>
			</property>
			<property type="Element" name="relatedTarget" >
				<description>The other DOM element involved in the event, if any.</description>
			</property>
			<property type="Object" name="result" >
				<description>The last value returned by an event handler that was triggered by this event, unless the value was undefined.</description>
			</property>
			<property type="Element" name="target" >
				<description>The DOM element that initiated the event.</description>
			</property>
			<property type="Number" name="timeStamp" >
				<description>The difference in milliseconds between the time the browser created the event and January 1, 1970.</description>
			</property>
			<property type="String" name="type" >
				<description>Describes the nature of the event.</description>
			</property>
			<property type="Number" name="which" >
				<description>For key or mouse events, this property indicates the specific key or button that was pressed.</description>
			</property>
		</properties>
	</class>
	<class type="jQuery.Deferred" superclass="Object">
		<constructors>
      <constructor>
        <parameters>
          <parameter name="function" type="Function" usage="optional">
            <description>An optional function which is called just before the constructor returns and is passed the constructed deferred object as both the this object and as the first argument to the function.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.Deferred"/>
        </return-types>
        <description>A chainable utility object that can register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function.</description>
      </constructor>
    </constructors>
		<methods>
			<method name="always" >
				<parameters>
          <parameter name="alwaysCallbacks" type="Function" usage="required">
            <description>
        A function, or array of functions, that is called when the Deferred is resolved or rejected.
      </description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.Deferred"/>
        </return-types>
        <description> Add handlers to be called when the Deferred object is either resolved or rejected. </description>
        <examples>
          <example>
			&lt;p&gt;Since the jQuery.get() method returns a jqXHR object, which is derived from a Deferred object, we can attach a callback for both success and error using the deferred.always() method.&lt;/p&gt;
		
		&lt;p&gt;
$.get("test.php").always( function() { 
  alert("$.get completed with success or error callback arguments"); 
} );
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="done" >
				<parameters>
          <parameter name="doneCallbacks" type="Function" usage="required">
            <description>
             A function, or array of functions, that are called when the Deferred is resolved.
           </description>
          </parameter>
          <parameter name="doneCallbacks" type="Function" usage="optional">
            <description>
             Optional additional functions, or arrays of functions, that are called when the Deferred is resolved.
           </description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.Deferred"/>
        </return-types>
        <description> Add handlers to be called when the Deferred object is resolved. </description>
        <examples>
          <example>
			&lt;p&gt;Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can attach a success callback using the .done() method.&lt;/p&gt;
		
		&lt;p&gt;
$.get("test.php").done(function() { 
  alert("$.get succeeded"); 
});
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Resolve a Deferred object when the user clicks a button, triggering a number of callback functions:&lt;/p&gt;
		
		&lt;p&gt;
// 3 functions to call when the Deferred object is resolved
function fn1() {
  $("p").append(" 1 ");
}
function fn2() {
  $("p").append(" 2 ");
}
function fn3(n) {
  $("p").append(n + " 3 " + n);
}

// create a deferred object
var dfd = $.Deferred();

// add handlers to be called when dfd is resolved
dfd
// .done() can take any number of functions or arrays of functions
.done( [fn1, fn2], fn3, [fn2, fn1] )
// we can chain done methods, too
.done(function(n) {
  $("p").append(n + " we're done.");
});

// resolve the Deferred object when the button is clicked
$("button").bind("click", function() {
  dfd.resolve("and");
});
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="fail" >
				<parameters>
          <parameter name="failCallbacks" type="Function" usage="required">
            <description>
             A function, or array of functions, that are called when the Deferred is rejected.
           </description>
          </parameter>
          <parameter name="failCallbacks" type="Function" usage="optional">
            <description>
             Optional additional functions, or arrays of functions, that are called when the Deferred is rejected.
           </description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.Deferred"/>
        </return-types>
        <description> Add handlers to be called when the Deferred object is rejected. </description>
        <examples>
          <example>
			&lt;p&gt;Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred, you can attach a success and failure callback using the deferred.done() and deferred.fail() methods.&lt;/p&gt;
		
		&lt;p&gt;
$.get("test.php")
  .done(function(){ alert("$.get succeeded"); })
  .fail(function(){ alert("$.get failed!"); });
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="notify" >
				<return-types>
					<return-type type="jQuery.Deferred"/>
				</return-types>
				<parameters>
					<parameter name="args" type="Object" usage="optional"/>
				</parameters>
			</method>
			<method name="notifyWith" >
				<return-types>
					<return-type type="jQuery.Deferred"/>
				</return-types>
				<parameters>
					<parameter name="context" type="Object" usage="optional"/>
					<parameter name="args" type="Object" usage="optional"/>
				</parameters>
			</method>
			<method name="pipe" >
				<parameters>
          <parameter name="doneFilter" type="Function" usage="optional">
            <description>
        An optional function that is called when the Deferred is resolved.
      </description>
          </parameter>
          <parameter name="failFilter" type="Function" usage="optional">
            <description>
        An optional function that is called when the Deferred is rejected.
      </description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.Deferred"/>
        </return-types>
        <description> Utility method to filter and/or chain Deferreds.  </description>
        <examples>
          <example>
			&lt;p&gt;Filter resolve value:&lt;/p&gt;
		
		&lt;p&gt;
var defer = $.Deferred(),
    filtered = defer.pipe(function( value ) {
      return value * 2;
    });

defer.resolve( 5 );
filtered.done(function( value ) {
  alert( "Value is ( 2*5 = ) 10: " + value );
});
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Filter reject value:&lt;/p&gt;
		
		&lt;p&gt;
var defer = $.Deferred(),
    filtered = defer.pipe( null, function( value ) {
      return value * 3;
    });

defer.reject( 6 );
filtered.fail(function( value ) {
  alert( "Value is ( 3*6 = ) 18: " + value );
});
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Chain tasks:&lt;/p&gt;
		
		&lt;p&gt;
var request = $.ajax( url, { dataType: "json" } ),
    chained = request.pipe(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
    });

chained.done(function( data ) {
  // data retrieved from url2 as provided by the first request
});

&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="progress" >
				<return-types>
					<return-type type="jQuery.Deferred"/>
				</return-types>
				<parameters>
					<parameter name="callback" type="Function" usage=""/>
				</parameters>
			</method>
			<method name="promise" >
				<parameters>
          <parameter name="target" type="Object" usage="optional">
            <description>Object onto which the promise methods have to be attached</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.Promise"/>
        </return-types>
        <description> Return a Deferred's Promise object. </description>
        <examples>
          <example>
			&lt;p&gt;Create a Deferred and set two timer-based functions to either resolve or reject the Deferred after a random interval. Whichever one fires first "wins" and will call one of the callbacks. The second timeout has no effect since the Deferred is already complete (in a resolved or rejected state) from the first timeout action.&lt;/p&gt;
		
		&lt;p&gt;// Create a Deferred and return its Promise
function asyncEvent(){
    var dfd = new jQuery.Deferred();
    setTimeout(function(){
        dfd.resolve("hurray");
    }, Math.floor(Math.random()*1500));
    setTimeout(function(){
        dfd.reject("sorry");
    }, Math.floor(Math.random()*1500));
    return dfd.promise();
}

// Attach a done and fail handler for the asyncEvent
$.when( asyncEvent() ).then(
    function(status){
        alert( status+', things are going well' );
    },
    function(status){
        alert( status+', you fail this time' );
    }
);
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Use the target argument to promote an existing object to a Promise:&lt;/p&gt;
		
		&lt;p&gt;
// Existing object
var obj = {
  hello: function( name ) {
    alert( "Hello " + name );
  }
},
// Create a Deferred
defer = $.Deferred();

// Set object as a promise
defer.promise( obj );

// Resolve the deferred
defer.resolve( "John" );

// Use the object as a Promise
obj.done(function( name ) {
  obj.hello( name ); // will alert "Hello John"
}).hello( "Karl" ); // will alert "Hello Karl"
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="reject" >
				<parameters>
          <parameter name="args" type="Object" usage="required">
            <description>
             Optional arguments that are passed to the failCallbacks.
           </description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.Deferred"/>
        </return-types>
        <description> Reject a Deferred object and call any failCallbacks with the given </description>
			</method>
			<method name="rejectWith" >
				<parameters>
          <parameter name="context" type="Object" usage="required">
            <description>
             Context passed to the failCallbacks as the </description>
          </parameter>
          <parameter name="args" type="Array" usage="optional">
            <description>
             An optional array of arguments that are passed to the failCallbacks.
           </description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.Deferred"/>
        </return-types>
        <description> Reject a Deferred object and call any failCallbacks with the given </description>
			</method>
			<method name="resolve" >
				<parameters>
          <parameter name="args" type="Object" usage="required">
            <description>
             Optional arguments that are passed to the doneCallbacks.
           </description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.Deferred"/>
        </return-types>
        <description> Resolve a Deferred object and call any doneCallbacks with the given </description>
			</method>
			<method name="resolveWith" >
				<parameters>
          <parameter name="context" type="Object" usage="required">
            <description>
             Context passed to the doneCallbacks as the </description>
          </parameter>
          <parameter name="args" type="Array" usage="optional">
            <description>
             An optional array of arguments that are passed to the doneCallbacks.
           </description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.Deferred"/>
        </return-types>
        <description> Resolve a Deferred object and call any doneCallbacks with the given </description>
			</method>
			<method name="state" >
				<return-types>
					<return-type type="String"/>
				</return-types>
			</method>
			<method name="then" >
				<parameters>
          <parameter name="doneCallbacks" type="Function" usage="required">
            <description>
             A function, or array of functions, called when the Deferred is resolved.
           </description>
          </parameter>
          <parameter name="failCallbacks" type="Function" usage="required">
            <description>
             A function, or array of functions, called when the Deferred is rejected.
           </description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="jQuery.Deferred"/>
        </return-types>
        <description> Add handlers to be called when the Deferred object is resolved or rejected. </description>
        <examples>
          <example>
			&lt;p&gt;Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can attach handlers using the .then method.&lt;/p&gt;
		
		&lt;p&gt;
$.get("test.php").then(
    function(){ alert("$.get succeeded"); },
    function(){ alert("$.get failed!"); }
);
&lt;/p&gt;
	</example>
        </examples>
			</method>
		</methods>
	</class>
	<class type="jQuery.Promise" superclass="Object">
		<constructors>
      <constructor>
        <parameters/>
        <return-types>
          <return-type type="jQuery.Promise"/>
        </return-types>
        <description>This object provides a subset of the methods of the Deferred object (then, done, fail, always, pipe. isResolved, and isRejected) to prevent users from changing the state of the Deferred..</description>
      </constructor>
    </constructors>
		<methods>
			<method name="always" >
				<parameters>
          <parameter name="alwaysCallbacks" type="Function" usage="required">
            <description>
        A function, or array of functions, that is called when the Deferred is resolved or rejected.
      </description>
          </parameter>
        </parameters>
				<return-types>
					<return-type type="jQuery.Promise"/>
				</return-types>
				<description> Add handlers to be called when the Deferred object is either resolved or rejected. </description>
        <examples>
          <example>
			&lt;p&gt;Since the jQuery.get() method returns a jqXHR object, which is derived from a Deferred object, we can attach a callback for both success and error using the deferred.always() method.&lt;/p&gt;
		
		&lt;p&gt;
$.get("test.php").always( function() { 
  alert("$.get completed with success or error callback arguments"); 
} );
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="done" >
				<parameters>
          <parameter name="doneCallbacks" type="Function" usage="required">
            <description>
             A function, or array of functions, that are called when the Deferred is resolved.
           </description>
          </parameter>
          <parameter name="doneCallbacks" type="Function" usage="optional">
            <description>
             Optional additional functions, or arrays of functions, that are called when the Deferred is resolved.
           </description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="Deferred"/>
        </return-types>
				<return-types>
					<return-type type="jQuery.Promise"/>
				</return-types>
				<description> Add handlers to be called when the Deferred object is resolved. </description>
        <examples>
          <example>
			&lt;p&gt;Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can attach a success callback using the .done() method.&lt;/p&gt;
		
		&lt;p&gt;
$.get("test.php").done(function() { 
  alert("$.get succeeded"); 
});
&lt;/p&gt;
	</example>
          <example>
			&lt;p&gt;Resolve a Deferred object when the user clicks a button, triggering a number of callback functions:&lt;/p&gt;
		
		&lt;p&gt;
// 3 functions to call when the Deferred object is resolved
function fn1() {
  $("p").append(" 1 ");
}
function fn2() {
  $("p").append(" 2 ");
}
function fn3(n) {
  $("p").append(n + " 3 " + n);
}

// create a deferred object
var dfd = $.Deferred();

// add handlers to be called when dfd is resolved
dfd
// .done() can take any number of functions or arrays of functions
.done( [fn1, fn2], fn3, [fn2, fn1] )
// we can chain done methods, too
.done(function(n) {
  $("p").append(n + " we're done.");
});

// resolve the Deferred object when the button is clicked
$("button").bind("click", function() {
  dfd.resolve("and");
});
&lt;/p&gt;
	</example>
        </examples>
      
			</method>
			<method name="fail" >
				<parameters>
          <parameter name="failCallbacks" type="Function" usage="required">
            <description>
             A function, or array of functions, that are called when the Deferred is rejected.
           </description>
          </parameter>
          <parameter name="failCallbacks" type="Function" usage="optional">
            <description>
             Optional additional functions, or arrays of functions, that are called when the Deferred is rejected.
           </description>
          </parameter>
        </parameters>
				<return-types>
					<return-type type="jQuery.Promise"/>
				</return-types>
				<description> Add handlers to be called when the Deferred object is rejected. </description>
        <examples>
          <example>
			&lt;p&gt;Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred, you can attach a success and failure callback using the deferred.done() and deferred.fail() methods.&lt;/p&gt;
		
		&lt;p&gt;
$.get("test.php")
  .done(function(){ alert("$.get succeeded"); })
  .fail(function(){ alert("$.get failed!"); });
&lt;/p&gt;
	</example>
        </examples>
			</method>
			<method name="state" >
				<return-types>
					<return-type type="String"/>
				</return-types>
				<description> Determine the current state of a Deferred object.</description>
			</method>
			<method name="then" >
				<parameters>
          <parameter name="doneCallbacks" type="Function" usage="required">
            <description>
             A function, or array of functions, called when the Deferred is resolved.
           </description>
          </parameter>
          <parameter name="failCallbacks" type="Function" usage="required">
            <description>
             A function, or array of functions, called when the Deferred is rejected.
           </description>
          </parameter>
        </parameters>
				<return-types>
					<return-type type="jQuery.Promise"/>
				</return-types>
				<description> Add handlers to be called when the Deferred object is resolved or rejected. </description>
        <examples>
          <example>
			&lt;p&gt;Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can attach handlers using the .then method.&lt;/p&gt;
		
		&lt;p&gt;
$.get("test.php").then(
    function(){ alert("$.get succeeded"); },
    function(){ alert("$.get failed!"); }
);
&lt;/p&gt;
	</example>
        </examples>
			</method>
		</methods>
	</class>
	<class type="jQuery.jqXHR" superclass="Object">
		<description>Object that transfers data between a web client and a remote web server.</description>
    <constructors>
      <constructor visibility="internal">
        <description>Creates a new instance of an XMLHttpRequest object.</description>
        <parameters/>
        <exceptions/>
        <return-types>
          <return-type type="jQuery.jqXHR"/>
        </return-types>
      </constructor>
    </constructors>
		<methods>
			<method name="overrideMimeType" visibility="basic">
        <description>May be used in the beforeSend() callback function, for example, to modify the response content-type header.</description>
        <parameters>
          <parameter name="type" type="String" usage="required">
            <description>String representing the mime type.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="void"/>
        </return-types>
        <example/>
        <remarks>Although currently recognized by most browsers, the XMLHttpRequest object will be part of the HTML DOM Level 3 specification.</remarks>
      </method>
			<method name="always" >
				<return-types>
					<return-type type="jQuery.jqXHR"/>
				</return-types>
			</method>
			<method name="done" >
				<return-types>
					<return-type type="jQuery.jqXHR"/>
				</return-types>
			</method>
			<method name="fail" >
				<return-types>
					<return-type type="jQuery.jqXHR"/>
				</return-types>
			</method>
			<method name="pipe" >
				<return-types>
					<return-type type="jQuery.Promise"/>
				</return-types>
			</method>
			<method name="promise" >
				<return-types>
					<return-type type="jQuery.Promise"/>
				</return-types>
			</method>
			<method name="state" >
				<return-types>
					<return-type type="String"/>
				</return-types>
			</method>
			<method name="then" >
				<return-types>
					<return-type type="jQuery.Promise"/>
				</return-types>
			</method>
			<method name="setRequestHeader" >
				<description>Sets a header and a value for the request.</description>
        <parameters>
          <parameter name="header" type="String, Document" usage="required">
            <description>Name of the header.</description>
          </parameter>
          <parameter name="value" type="String, Document" usage="required">
            <description>Value of the header.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="void"/>
        </return-types>
        <exceptions>
          <exception type="DOMException">
            <description>Throws an UNKNOWN_ERR error.</description>
          </exception>
        </exceptions>
        <example/>
        <remarks>Although currently recognized by most browsers, the XMLHttpRequest object will be part of the HTML DOM Level 3 specification.</remarks>
			</method>
			<method name="getAllResponseHeader" >
				<description>Returns all HTTP headers as a single string.</description>
        <return-description>Returns all HTTP headers as a single string.</return-description>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <example/>
        <remarks>Although currently recognized by most browsers, the XMLHttpRequest object will be part of the HTML DOM Level 3 specification.</remarks>
			</method>
			<method name="getResponseHeader" >
				<description>Returns the value of the specified HTTP header.</description>
        <return-description>Returns the value of the specified HTTP header.</return-description>
        <parameters>
          <parameter name="header" type="String" usage="required">
            <description>Name of the HTTP header.</description>
          </parameter>
        </parameters>
        <return-types>
          <return-type type="String"/>
        </return-types>
        <example/>
        <remarks>Although currently recognized by most browsers, the XMLHttpRequest object will be part of the HTML DOM Level 3 specification.</remarks>
			</method>
			<method name="statusCode" >
				<return-types>
					<return-type type="Number"/>
				</return-types>
			</method>
			<method name="abort" >
				<description>Cancels the current request.</description>
        <return-types>
          <return-type type="void"/>
        </return-types>
        <example/>
        <remarks>Although currently recognized by most browsers, the XMLHttpRequest object will be part of the HTML DOM Level 3 specification.</remarks>
			</method>
		</methods>
		<properties>
			<property name="readyState" type="Number" access="read" visibility="basic">
        <description>Returns the current state of an object. Valid values are 0=uninitialized, 1=open, 2=sent, 3=receiving, 4=loaded.</description>
      </property>
      <property name="responseText" type="String" access="read" visibility="basic">
        <description>Response formatted as a string.</description>
      </property>
      <property name="responseXML" type="Document" access="read" visibility="basic">
        <description>Response formatted as an XML document.</description>
      </property>
      <property name="status" type="Number" access="read" visibility="basic">
        <description>Status of the Response. (e.g. 200="OK", 404="Not Found", etc.)</description>
      </property>
      <property name="statusText" type="String" access="read" visibility="basic">
        <description>Response text corresonding to status (e.g. "OK", "Not Found", etc.)</description>
      </property>
		</properties>
	</class>
	<class type="jQuery.fx" superclass="Object">
		<methods>
			<method name="stop" >
				<return-types>
					<return-type type="Function"/>
				</return-types>
			</method>
			<method name="tick" >
				<return-types>
					<return-type type="Function"/>
				</return-types>
			</method>
			<method name="start" >
				<return-types>
					<return-type type="Function"/>
				</return-types>
			</method>
		</methods>
		<properties>
			<property type="Number" name="interval" >
				<description>The rate (in milliseconds) at which animations fire.</description>
			</property>
			<property type="Boolean" name="off" >
				<description>Globally disable all animations.</description>
			</property>
			<property type="jQuery.speeds" name="speeds" ></property>
		</properties>
	</class>
</javascript>